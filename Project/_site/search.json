[
  {
    "objectID": "Project.html",
    "href": "Project.html",
    "title": "DSAN5500 Final Project",
    "section": "",
    "text": "Question #3 Exploring Applications\nExamining different applications of the data structure that make it helpful for particular fields\nTopic Chosen:\nCustomer Relationship Management Systems\nIdentify a substantive application of that topic in a field you are interested in: e.g., bioinformatics, marketing, finance, NLP, image processing, operations management, social science:\nMarketing\nWrite a Literature Review section containing a few examples of the use of the topic in your chosen field that are particularly interesting to you:\nYou can find the literature review here.\nCreate a Quarto document or Jupyter notebook containing code that you wrote yourself which illustrates the application of the data structure or algorithm within your domain of interest, describing in your own words (through comments or Markdown text above/below the code) how the code works and what it does.\nOur data structure can be found here."
  },
  {
    "objectID": "Project.html#quarto",
    "href": "Project.html#quarto",
    "title": "Project Walkthrough",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Customer relationship management (CRM) is a crucial component of a businesses success. CRM is software used by a company in an attempt to help them maintain solid relationships with their clients. It is critical for a company’s success specifically when a company is just getting started, specifically, a startup.\nWithin this project, we are acting as a travel startup with the hopes of building a platform to manage a small number of customers utilizing a basic data structure - a linked list."
  },
  {
    "objectID": "rough_linked_list.html",
    "href": "rough_linked_list.html",
    "title": "5200 Project",
    "section": "",
    "text": "# create another linked list: PlanNode and link the plans and prices together\nclass PlanNode:\n    def __init__(self, plan, price):\n        self.plan = plan\n        self.price = price\n        self.next = None\n\nclass Customer:\n    def __init__(self, customer_id, name, email, phone, address, country, plan):\n        self.customer_id = customer_id\n        self.name = name\n        self.email = email\n        self.phone = phone\n        self.address = address\n        self.country = country\n        self.plan_head = None\n        self.set_plan(plan)\n        self.next = None\n\n    def set_plan(self, plan):\n        plans_price = {\n            \"Explorer's Delight\": 3500, \n            \"Luxury Escapes\": 5500,\n            \"Budget Explore\": 2000, \n            \"Family Fun\": 4000,\n            \"Cultural Immersion\": 3000\n        }\n\n        if plan not in plans_price:\n            raise ValueError(\"Invalid plan\")\n        \n        self.add_plan(plan, plans_price[plan])\n\n    def add_plan(self, plan, price):\n        new_plan = PlanNode(plan, price)\n        if not self.plan_head:\n            self.plan_head = new_plan\n        else:\n            current = self.plan_head\n            while current.next:\n                current = current.next\n            current.next = new_plan\n    \n# customer linked list\n# class CustomerNode:\n#     def __init__(self, customer_id, name, email, phone, address, country, plan, price):\n#         self.customer_id = customer_id\n#         self.name = name\n#         self.email = email\n#         self.phone = phone\n#         self.address = address\n#         # plans = [\"Explorer's Delight\", \"Luxury Escapes\", \"Budget Explore\", \"Family Fun\", \"Cultural Immersion\"]\n#         self.plan = plan\n#         self.country = country\n#         self.price = price\n#         self.next = None\n\nclass CustomerLinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def add_customer(self, customer_id, name, email, phone, address, country, plan):\n        new_customer = Customer(customer_id, name, email, phone, address, country, plan)\n\n        if not self.head:\n            self.head = new_customer\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_customer\n\n    def display_customers(self):\n        current = self.head\n        while current:\n            print(\"Customer ID:\", current.customer_id)\n            print(\"Name:\", current.name)\n            print(\"Email:\", current.email)\n            print(\"Phone:\", current.phone)\n            print(\"Address:\", current.address)\n            print(\"Country:\", current.country)\n            print(\"Plans:\")\n            plan_current = current.plan_head\n            while plan_current:\n                print(\"- Plan:\", plan_current.plan)\n                print(\"  Price:\", plan_current.price)\n                plan_current = plan_current.next\n            print(\"------------------------\")\n            current = current.next\n        \n    def view_linked_list(self):\n        current = self.head\n        while current:\n            print(f\"Customer ID: {current.customer_id}\")\n            print(f\"Name: {current.name}\")\n            print(\"------------------------\")\n            current = current.next\n\n    def update_information(self, customer_id, new_name, new_email, new_phone, new_address, new_country, new_plan_name):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.name = new_name\n                current.email = new_email\n                current.phone = new_phone\n                current.address = new_address\n                current.country = new_country\n                current.plan_head = None  \n                current.set_plan(new_plan_name)  \n                return\n            current = current.next\n        print(\"Customer not found.\")\n\n\ncustomer_list = CustomerLinkedList()\n\ncustomer_list.add_customer(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"123 Main St\", \"USA\", \"Explorer's Delight\")\ncustomer_list.add_customer(2, \"Jane Smith\", \"jane@example.com\", \"987-654-3210\", \"456 Elm St\", \"Canada\", \"Luxury Escapes\")\ncustomer_list.add_customer(3, \"Alice Johnson\", \"alice@example.com\", \"555-123-4567\", \"789 Oak St\", \"Australia\", \"Budget Explore\")\ncustomer_list.add_customer(4, \"Bob Brown\", \"bob@example.com\", \"333-555-7777\", \"101 Pine St\", \"UK\", \"Family Fun\")\ncustomer_list.add_customer(5, \"Charlie Davis\", \"charlie@example.com\", \"111-222-3333\", \"202 Cedar St\", \"Spain\", \"Cultural Immersion\")\ncustomer_list.add_customer(6, \"Ella Martinez\", \"ella@example.com\", \"999-888-7777\", \"303 Maple St\", \"France\", \"Explorer's Delight\")\ncustomer_list.add_customer(7, \"Frank Wilson\", \"frank@example.com\", \"777-888-9999\", \"404 Birch St\", \"Italy\", \"Luxury Escapes\")\ncustomer_list.add_customer(8, \"Grace Lee\", \"grace@example.com\", \"666-555-4444\", \"505 Walnut St\", \"Germany\", \"Budget Explore\")\ncustomer_list.add_customer(9, \"Henry Garcia\", \"henry@example.com\", \"444-333-2222\", \"606 Pineapple St\", \"Brazil\", \"Family Fun\")\ncustomer_list.add_customer(10, \"Isabella Rodriguez\", \"isabella@example.com\", \"222-333-4444\", \"707 Mango St\", \"Mexico\", \"Cultural Immersion\")\n\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nAddress: 123 Main St\nCountry: USA\nPlans:\n- Plan: Explorer's Delight\n  Price: 3500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nAddress: 456 Elm St\nCountry: Canada\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nAddress: 789 Oak St\nCountry: Australia\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nAddress: 101 Pine St\nCountry: UK\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nAddress: 202 Cedar St\nCountry: Spain\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nAddress: 303 Maple St\nCountry: France\nPlans:\n- Plan: Explorer's Delight\n  Price: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nAddress: 404 Birch St\nCountry: Italy\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nAddress: 505 Walnut St\nCountry: Germany\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nAddress: 606 Pineapple St\nCountry: Brazil\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 10\nName: Isabella Rodriguez\nEmail: isabella@example.com\nPhone: 222-333-4444\nAddress: 707 Mango St\nCountry: Mexico\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------\n\n\n\nclass Customer:\n    def __init__(self, customer_id, name, email, phone, address, country, plan, price):\n        self.customer_id = customer_id\n        self.name = name\n        self.email = email\n        self.phone = phone\n        self.address = address\n        # plans = [\"Explorer's Delight\", \"Luxury Escapes\", \"Budget Explore\", \"Family Fun\", \"Cultural Immersion\"]\n        self.plan = plan\n        self.country = country\n        self.price = price\n        self.next = None\n\nclass CustomerLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_customer(self, customer_id, name, email, phone, address, plan, country, price):\n        new_customer = Customer(customer_id, name, email, phone, address, plan, country, price)\n        if not self.head:\n            self.head = new_customer \n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_customer\n\n    def display_customers(self):\n        current = self.head\n        while current:\n            print(\"Customer ID:\", current.customer_id)\n            print(\"Name:\", current.name)\n            print(\"Email:\", current.email)\n            print(\"Phone:\", current.phone)\n            print(\"Plans:\", current.plan)\n            print(\"Price:\", current.price)\n            print(\"------------------------\")\n            current = current.next\n            \n    def remove_customer(self):\n        current = self.head \n\n    def update_information(self, customer_id, new_name, new_email, new_phone, new_address, new_plan, new_country, new_price):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.name = new_name\n                current.email = new_email\n                current.phone = new_phone\n                current.address = new_address\n                current.elements = new_plan\n                current.country = new_country\n                current.price = new_price\n                return\n            current = current.next\n\n    def add_customer_feedback(self, customer_id): #this means they have come back from their trip\n        plans = [\"Explorer's Delight\", \"Luxury Escapes\", \"Budget Explore\", \"Family Fun\", \"Cultural Immersion\"]\n        pass\n\n    def export_all_customer_information(self, customer_id):\n        pass\n\n    def add_another_package(self, customer_id, new_package):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.plan.append(new_package)\n                return\n            current = current.next\n\n    def view_linked_list(self):\n        current = self.head\n        while current:\n            print(f\"Customer ID: {current.customer_id}\")\n            print(f\"Name: {current.name}\")\n            print(\"------------------------\")\n            current = current.next\n\n    \n\n# Example usage:\ncustomer_list = CustomerLinkedList()\ncustomer_list.add_customer(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"606 Pineapple St\", \"Family Fun\", \"Brazil\", 3800)\ncustomer_list.add_customer(2, \"Jane Smith\", \"jane@example.com\", \"987-654-3210\", \"707 Mango St\", \"Explorer's Delight\", \"Mexico\", 3100)\ncustomer_list.add_customer(3, \"Alice Johnson\", \"alice@example.com\", \"555-123-4567\", \"456 Elm St\", \"Explorer's Delight\", \"Canada\", 3000)\ncustomer_list.add_customer(4, \"Bob Brown\", \"bob@example.com\", \"333-555-7777\", \"789 Oak St\", \"Budget Explore\", \"Australia\", 2000)\ncustomer_list.add_customer(5, \"Charlie Davis\", \"charlie@example.com\", \"111-222-3333\", \"101 Pine St\", \"Family Fun\", \"UK\", 4000)\ncustomer_list.add_customer(6, \"Ella Martinez\", \"ella@example.com\", \"999-888-7777\", \"202 Cedar St\", \"Cultural Immersion\", \"Spain\", 3500)\ncustomer_list.add_customer(7, \"Frank Wilson\", \"frank@example.com\", \"777-888-9999\", \"303 Maple St\", \"Explorer's Delight\", \"France\", 3200)\ncustomer_list.add_customer(8, \"Grace Lee\", \"grace@example.com\", \"666-555-4444\", \"404 Birch St\", \"Luxury Escapes\", \"Italy\", 5500)\ncustomer_list.add_customer(9, \"Henry Garcia\", \"henry@example.com\", \"444-333-2222\", \"505 Walnut St\", \"Budget Explore\", \"Germany\", 2100)\n\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nPlans: Brazil\nPrice: 3800\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nPlans: Mexico\nPrice: 3100\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nPlans: Canada\nPrice: 3000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nPlans: Australia\nPrice: 2000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nPlans: UK\nPrice: 4000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nPlans: Spain\nPrice: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nPlans: France\nPrice: 3200\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nPlans: Italy\nPrice: 5500\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nPlans: Germany\nPrice: 2100\n------------------------\n\n\n\n# update customer informtion #only changed price \ncustomer_list.update_information(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"606 Pineapple St\", \"Luxury Escape\", \"Brazil\", 5500)\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nPlans: Family Fun\nPrice: 5500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nPlans: Explorer's Delight\nPrice: 3100\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nPlans: Explorer's Delight\nPrice: 3000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nPlans: Budget Explore\nPrice: 2000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nPlans: Family Fun\nPrice: 4000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nPlans: Cultural Immersion\nPrice: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nPlans: Explorer's Delight\nPrice: 3200\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nPlans: Luxury Escapes\nPrice: 5500\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nPlans: Budget Explore\nPrice: 2100\n------------------------\n\n\n\n# view linked list\ncustomer_list.view_linked_list()\n\nCustomer ID: 1\nName: John Doe\n------------------------\nCustomer ID: 2\nName: Jane Smith\n------------------------\nCustomer ID: 3\nName: Alice Johnson\n------------------------\nCustomer ID: 4\nName: Bob Brown\n------------------------\nCustomer ID: 5\nName: Charlie Davis\n------------------------\nCustomer ID: 6\nName: Ella Martinez\n------------------------\nCustomer ID: 7\nName: Frank Wilson\n------------------------\nCustomer ID: 8\nName: Grace Lee\n------------------------\nCustomer ID: 9\nName: Henry Garcia\n------------------------\n\n\n\nimport time\n\n# Record start time\nstart_time = time.time()\n\n# Display all customers\ncustomer_list.display_customers()\n\n# Record end time\nend_time = time.time()\n\n# Calculate duration\nduration = end_time - start_time\nprint(\"Time taken to display all customers:\", duration, \"seconds\")\n\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nPlans: Family Fun\nPrice: 5500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nPlans: Explorer's Delight\nPrice: 3100\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nPlans: Explorer's Delight\nPrice: 3000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nPlans: Budget Explore\nPrice: 2000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nPlans: Family Fun\nPrice: 4000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nPlans: Cultural Immersion\nPrice: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nPlans: Explorer's Delight\nPrice: 3200\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nPlans: Luxury Escapes\nPrice: 5500\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nPlans: Budget Explore\nPrice: 2100\n------------------------\nTime taken to display all customers: 0.0002071857452392578 seconds"
  },
  {
    "objectID": "introduction.html#what-is-customer-relationship-management",
    "href": "introduction.html#what-is-customer-relationship-management",
    "title": "Introduction",
    "section": "",
    "text": "Customer relationship management (CRM) is a crucial component of a businesses success. CRM is software used by a company in an attempt to help them maintain solid relationships with their clients. It is critical for a company’s success specifically when a company is just getting started, specifically, a startup.\nWithin this project, we are acting as a travel startup with the hopes of building a platform to manage a small number of customers utilizing a basic data structure - a linked list."
  },
  {
    "objectID": "introduction.html#what-are-linked-lists",
    "href": "introduction.html#what-are-linked-lists",
    "title": "Introduction",
    "section": "What are Linked Lists?",
    "text": "What are Linked Lists?\nLinked lists are the basis of many data structures. They are a fundamental concept in the world of computer science and they have the power to help construct a basic CRM system. A linked list consists of nodes where each node contains data and a reference link to the next node within a sequence. This structure allows for dynamic memory allocation and efficient insertion and deletion operations compared to arrays.(“Linked List Data Structure” n.d.)\nBelow is the basic structure of a linked list."
  },
  {
    "objectID": "introduction.html#crm-and-linked-lists",
    "href": "introduction.html#crm-and-linked-lists",
    "title": "Introduction",
    "section": "CRM and Linked Lists",
    "text": "CRM and Linked Lists\nThis linked list will hold the power to update and edit customer information within the hypothetical CRM system that we are creating. Our CRM system includes client information including name, phone number, address, travel package bought, user ID, country and price. The linked list will allow the employees at the startup to easily access key information about their customers.\nThe CRM system will have the ability to do things like adding customers, removing customers, updating information, receiving feedback, exporting information and adding multiple packages.\nBelow is an example of how the list will function for a customer."
  },
  {
    "objectID": "introduction.html#the-startup",
    "href": "introduction.html#the-startup",
    "title": "Introduction",
    "section": "The Startup",
    "text": "The Startup\nOur startup is a travel company that allows customers to purchase travel packages to countries all around the world. There are five different packages that the company currently offers:\nA V C E R\nThe customer has the option to choose one of these packages and the country they want to travel to, and our startup handles all the logistics.\nTo replicate real information being brought into the startup we have obtained data from the python library faker.\nWe recognize that as this hypothetical startup would grow, the linked list would start to get slower. ADD OTHER OPTIONS HERE\nThis project will walk through the power of a linked list and how crucial it is to computer scientists in truly understanding the fundamentals of data structures and how they can be built upon to improve speed and efficiency.\nV"
  },
  {
    "objectID": "introduction.html#our-startup",
    "href": "introduction.html#our-startup",
    "title": "Introduction",
    "section": "Our Startup",
    "text": "Our Startup\nOur startup is a travel company that allows customers to purchase travel packages to countries all around the world. There are five different packages that the company currently offers:\n\nExplorer’s Delight\nLuxury Escapes\nBudget Explore\nFamily Fun\nCultural Immersion\n\nThe customer has the option to choose one of these packages and the country they want to travel to, and our startup handles all the logistics.\nTo replicate real information being brought into the startup we have obtained data from the python library faker.\nThe faker data creates a customer and includes:\n\nName\nAddress\nPhone Number\nCountry\nPlan\nPrice"
  },
  {
    "objectID": "introduction.html#beyond-linked-lists",
    "href": "introduction.html#beyond-linked-lists",
    "title": "Introduction",
    "section": "Beyond Linked Lists",
    "text": "Beyond Linked Lists\nWe recognize that as this hypothetical startup would grow, the linked list would start to face many technical issues such as scalability and security concerns.\nLinked lists can face scalability challenges as the size of the customer database grows. Insertions and deletions in a linked list can be inefficient, especially if the list becomes large. As the CRM system accumulates more customer data and interactions, the performance of the linked list may be inadequate for our startups needs. The solution could be considering more scalable data structures like a hash table.\nFurthermore, linked lists may pose security risks, especially if not implemented securely. In a linked list, nodes can be easily manipulated or accessed if proper access controls and data encryption mechanisms are not in place. This vulnerability can lead to data breaches and unauthorized access to sensitive customer information. The solution to this would be to implement robust security measures such as authentication protocols to protect customer data stored in the CRM system.\nWithin this project we will focus on a reliable linked list fully aware of what challenges could arise in the future."
  },
  {
    "objectID": "introduction.html#objectives",
    "href": "introduction.html#objectives",
    "title": "Introduction",
    "section": "Objectives",
    "text": "Objectives\nThis project will walk through the power of a linked list and how crucial it is to computer scientists in truly understanding the fundamentals of data structures and how they can be built upon to improve speed and efficiency."
  },
  {
    "objectID": "litreview.html",
    "href": "litreview.html",
    "title": "Literature Review",
    "section": "",
    "text": "Customer relationship management, also known as CRM is a key component of a businesses success. CRM is a strategy that companies use in an attempt to manage relationships with previous, current and future customers. CRM helps businesses and companies streamline processes, build relationships, increase sales, improve customer survival as well as a wealth of other benefits.(“What Is CRM (Customer Relationship Management)? - Salesforce.com” n.d.) One benefit that many do not think of is CRM’s impact on a country’s innovation and sustainability efforts. This literature review will highlight the necessity of technologically advanced CRM systems and how it impacts a company’s competitiveness and how crm can improve innovation for a company.\nAs companies get more and more complex, the importance of CRM heightens. CRM is needed to improve service quality and build upon relationships with customers in order to satisfy them to survive in a competitive environment. There are three categories of CRM technology - Operational, Analytical and Cooperational. Operational CRM is the process of communication with a customer from marketing and sale stage till after sales services and receiving feedback is entrusted to a person. Analytical CRM is the tools and techniques used to analyze obtained data from operational CRM. Finally, Cooperational CRM is how customers interact with the company. All three CRM technologies are crucial for the success of a company. For instance, operational CRM without analytical CRM would make no sense as the data would not be used to improve the overall customer experience leading to better performance. In order for a company to compete with others they must utilize all three of these technologies.(Tohidi and Jabbari 2012)\nAnother aspect CRM can improve is companies’ innovativeness. “Customer knowledge management and innovation are the two key modern-firm drivers for a set of successful survival, growth, and development strategies, enhancing business efficiency, performance, and sustainable competitive advantage.”(Gil-Gomez et al. 2020) Essentially, knowledge and innovation are inalienable and inseparable. Meaning that the more knowledge one obtains about their customers, the more they can innovate. Some people even consider CRM to be a sort of Green IT, oriented toward digital transformation and sustainable business model innovation.(Gil-Gomez et al. 2020)\nCRM systems are built on complex software solution systems like client server architecture. The choice of software structure for building CRM systems depends on factors such as organizational requirements, technical capabilities, scalability needs, and budget considerations. Each software structure has its own advantages and disadvantages and depends on a company’s needs. For instance, a small startup would need a very basic architecture with only a couple of clients.\nCustomer relationship management is extremely important when it comes to a company’s success. CRM should not be overlooked as it has the power to improve many aspects of a business, whether the business is small or large."
  },
  {
    "objectID": "litreview.html#the-data-behind-technologically-advance-crm-systems",
    "href": "litreview.html#the-data-behind-technologically-advance-crm-systems",
    "title": "Literature Review",
    "section": "",
    "text": "Customer relationship management, also known as CRM is a key component of a businesses success. CRM is a strategy that companies use in an attempt to manage relationships with previous, current and future customers. CRM helps businesses and companies streamline processes, build relationships, increase sales, improve customer survival as well as a wealth of other benefits. One benefit that many do not think of is CRM’s impact on a country’s innovation and sustainability efforts. This literature review will highlight the necessity of technologically advanced CRM systems and how it impacts a company’s competitiveness and how crm can improve innovation for a company.\nAs companies get more and more complex, the importance of CRM heightens. CRM is needed to improve service quality and build upon relationships with customers in order to satisfy them to survive in a competitive environment. There are three categories of CRM technology - Operational, Analytical and Cooperational. Operational CRM is the process of communication with a customer from marketing and sale stage till after sales services and receiving feedback is entrusted to a person. Analytical CRM is the tools and techniques used to analyze obtained data from operational CRM. Finally, Cooperational CRM is how customers interact with the company. All three CRM technologies are crucial for the success of a company. For instance, operational CRM without analytical CRM would make no sense as the data would not be used to improve the overall customer experience leading to better performance. In order for a company to compete with others they must utilize all three of these technologies.\nAnother aspect CRM can improve is companies’ innovativeness. “Customer knowledge management and innovation are the two key modern-firm drivers for a set of successful survival, growth, and development strategies, enhancing business efficiency, performance, and sustainable competitive advantage.”(https://www.tandfonline.com/doi/full/10.1080/1331677X.2019.1676283) Essentially, knowledge and innovation are inalienable and inseparable. Meaning that the more knowledge one obtains about their customers, the more they can innovate. Some people even consider CRM to be a sort of Green IT, oriented toward digital transformation and sustainable business model innovation.\nCRM systems are built on complex software solution systems like client server architecture. The choice of software structure for building CRM systems depends on factors such as organizational requirements, technical capabilities, scalability needs, and budget considerations. Each software structure has its own advantages and disadvantages and depends on a company’s needs. For instance, a small startup would need a very basic architecture with only a couple of clients.\nCustomer relationship management is extremely important when it comes to a company’s success. CRM should not be overlooked as it has the power to improve many aspects of a business, whether the business is small or large.\n\nhttps://www.tandfonline.com/doi/full/10.1080/1331677X.2019.1676283\nhttps://www.sciencedirect.com/science/article/pii/S2212017312001119\nhttps://journals.sagepub.com/doi/abs/10.1177/2319714518798410"
  },
  {
    "objectID": "introduction.html#our-crm-system",
    "href": "introduction.html#our-crm-system",
    "title": "Introduction",
    "section": "Our CRM System",
    "text": "Our CRM System\nOur developed CRM System will include:\nadd_customer: Adds a new customer to the linked list.\ndisplay_customers: Displays all customers in the linked list with their details.\nupdate_information: Updates information for a specific customer identified by their customer ID.\nadd_customer_feedback: Placeholder method to add feedback for a customer after their trip.\nexport_all_customer_information: Placeholder method for exporting all customer information.\nadd_another_package: Adds another package to a customer’s plan.\nview_linked_list: Displays a summary of the linked list by printing customer IDs and names."
  },
  {
    "objectID": "authors.html",
    "href": "authors.html",
    "title": "About Us",
    "section": "",
    "text": "Kendall Gilbert\nMy name is Kendall Gilbert and I am first year student in the Data Science and Analytics program at Georgetown University. I graduated undergrad from Elon University where I majored in Media Analytics with minors in Statistics and Business Administration. I am passionate about design thinking, machine learning and making a meaningful impact with data.\n\n\nHannah Kim\nMy name is Hannah Kim and I am a first year student in the Data Science and Analytics program at Georgetown University. I graduated from Gachon University in S.Korea with a degree in Software Engineering. I am interested in strategic thinking, using data to solve real-world problems, and using data to drive decision-making."
  },
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "Project Walkthrough",
    "section": "",
    "text": "This project included three phases of Linked Lists\n\nPreliminary Linked List\nDouble Linked List Structure\nFinal Linked List\n\n\nPreliminary Linked List\nWithin the preliminary linked list we decided how the linked list would be structured. Within this page we will walkthrough our thought process and the code we have written in each phase.\nThis linked list was structured into two classes customerclass and customer linked list class.\nFirst is the customerclass which initialized the customer and plan functionality. This implementation allows each customer to have a linked list of plans associated with them.\n\n\nCode\nclass Customer:\n    def __init__(self, customer_id, name, email, phone, address, country, plan):\n        self.customer_id = customer_id\n        self.name = name\n        self.email = email\n        self.phone = phone\n        self.address = address\n        self.country = country\n        self.plan_head = None\n        self.set_plan(plan)\n        self.next = None\n\n    def set_plan(self, plan):\n        plans_price = {\n            \"Explorer's Delight\": 3500, \n            \"Luxury Escapes\": 5500,\n            \"Budget Explore\": 2000, \n            \"Family Fun\": 4000,\n            \"Cultural Immersion\": 3000\n        }\n\n        if plan not in plans_price:\n            raise ValueError(\"Invalid plan\")\n        \n        self.add_plan(plan, plans_price[plan])\n\n    def add_plan(self, plan, price):\n        new_plan = PlanNode(plan, price)\n        if not self.plan_head:\n            self.plan_head = new_plan\n        else:\n            current = self.plan_head\n            while current.next:\n                current = current.next\n            current.next = new_plan\n\n\nThis class integrates the plan functionality. Each customer now has a plan_head attribute pointing to the head of their plan linked list. The set_plan method sets the initial plan for the customer, while the add_plan method adds new plans to the end of the linked list.\nNext is the Customer Linked List that includes represents a linked list of customers.\n\n\nCode\n# customer linked list\n# class CustomerNode:\n#     def __init__(self, customer_id, name, email, phone, address, country, plan, price):\n#         self.customer_id = customer_id\n#         self.name = name\n#         self.email = email\n#         self.phone = phone\n#         self.address = address\n#         # plans = [\"Explorer's Delight\", \"Luxury Escapes\", \"Budget Explore\", \"Family Fun\", \"Cultural Immersion\"]\n#         self.plan = plan\n#         self.country = country\n#         self.price = price\n#         self.next = None\n\nclass CustomerLinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def add_customer(self, customer_id, name, email, phone, address, country, plan):\n        new_customer = Customer(customer_id, name, email, phone, address, country, plan)\n\n        if not self.head:\n            self.head = new_customer\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_customer\n\n    def display_customers(self):\n        current = self.head\n        while current:\n            print(\"Customer ID:\", current.customer_id)\n            print(\"Name:\", current.name)\n            print(\"Email:\", current.email)\n            print(\"Phone:\", current.phone)\n            print(\"Address:\", current.address)\n            print(\"Country:\", current.country)\n            print(\"Plans:\")\n            plan_current = current.plan_head\n            while plan_current:\n                print(\"- Plan:\", plan_current.plan)\n                print(\"  Price:\", plan_current.price)\n                plan_current = plan_current.next\n            print(\"------------------------\")\n            current = current.next\n        \n    def view_linked_list(self):\n        current = self.head\n        while current:\n            print(f\"Customer ID: {current.customer_id}\")\n            print(f\"Name: {current.name}\")\n            print(\"------------------------\")\n            current = current.next\n\n    def update_information(self, customer_id, new_name, new_email, new_phone, new_address, new_country, new_plan_name):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.name = new_name\n                current.email = new_email\n                current.phone = new_phone\n                current.address = new_address\n                current.country = new_country\n                current.plan_head = None  \n                current.set_plan(new_plan_name)  \n                return\n            current = current.next\n        print(\"Customer not found.\")\n\n\n\nThe init method initializes the linked list with a head set to None.\nadd_customer method adds a new customer to the linked list.\ndisplay_customers method prints information of all customers in the linked list.\nremove_customer method is incomplete. It should remove a customer from the linked list, but it lacks implementation.\nupdate_information method updates information of a customer identified by their ID.\nadd_customer_feedback method is stubbed out and needs implementation.\nexport_all_customer_information method is stubbed out and needs implementation.\nadd_another_package method adds a new package to a customer’s plan identified by their ID.\nview_linked_list method prints basic information of all customers in the linked list.\n\nAs you can see, this linked list gives us a good idea of what out final linked list would entail. To test out the linked list we ran it with the customers created by the faker data library.\n\n\nCode\nclass Customer:\n    def __init__(self, customer_id, name, email, phone, address, country, plan, price):\n        self.customer_id = customer_id\n        self.name = name\n        self.email = email\n        self.phone = phone\n        self.address = address\n        # plans = [\"Explorer's Delight\", \"Luxury Escapes\", \"Budget Explore\", \"Family Fun\", \"Cultural Immersion\"]\n        self.plan = plan\n        self.country = country\n        self.price = price\n        self.next = None\n\nclass CustomerLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_customer(self, customer_id, name, email, phone, address, plan, country, price):\n        new_customer = Customer(customer_id, name, email, phone, address, plan, country, price)\n        if not self.head:\n            self.head = new_customer \n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_customer\n\n    def display_customers(self):\n        current = self.head\n        while current:\n            print(\"Customer ID:\", current.customer_id)\n            print(\"Name:\", current.name)\n            print(\"Email:\", current.email)\n            print(\"Phone:\", current.phone)\n            print(\"Plans:\", current.plan)\n            print(\"Price:\", current.price)\n            print(\"------------------------\")\n            current = current.next\n            \n    def remove_customer(self):\n        current = self.head \n\n    def update_information(self, customer_id, new_name, new_email, new_phone, new_address, new_plan, new_country, new_price):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.name = new_name\n                current.email = new_email\n                current.phone = new_phone\n                current.address = new_address\n                current.elements = new_plan\n                current.country = new_country\n                current.price = new_price\n                return\n            current = current.next\n\n    def add_customer_feedback(self, customer_id): #this means they have come back from their trip\n        plans = [\"Explorer's Delight\", \"Luxury Escapes\", \"Budget Explore\", \"Family Fun\", \"Cultural Immersion\"]\n        pass\n\n    def export_all_customer_information(self, customer_id):\n        pass\n\n    def add_another_package(self, customer_id, new_package):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.plan.append(new_package)\n                return\n            current = current.next\n\n    def view_linked_list(self):\n        current = self.head\n        while current:\n            print(f\"Customer ID: {current.customer_id}\")\n            print(f\"Name: {current.name}\")\n            print(\"------------------------\")\n            current = current.next\n\n    \n\n# Example usage:\ncustomer_list = CustomerLinkedList()\ncustomer_list.add_customer(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"606 Pineapple St\", \"Family Fun\", \"Brazil\", 3800)\ncustomer_list.add_customer(2, \"Jane Smith\", \"jane@example.com\", \"987-654-3210\", \"707 Mango St\", \"Explorer's Delight\", \"Mexico\", 3100)\ncustomer_list.add_customer(3, \"Alice Johnson\", \"alice@example.com\", \"555-123-4567\", \"456 Elm St\", \"Explorer's Delight\", \"Canada\", 3000)\ncustomer_list.add_customer(4, \"Bob Brown\", \"bob@example.com\", \"333-555-7777\", \"789 Oak St\", \"Budget Explore\", \"Australia\", 2000)\n#customer_list.add_customer(6, \"Ella Martinez\", \"ella@example.com\", \"999-888-7777\", \"202 Cedar St\", \"Cultural Immersion\", \"Spain\", 3500)\n#customer_list.add_customer(7, \"Frank Wilson\", \"frank@example.com\", \"777-888-9999\", \"303 Maple St\", \"Explorer's Delight\", \"France\", 3200)\n#customer_list.add_customer(8, \"Grace Lee\", \"grace@example.com\", \"666-555-4444\", \"404 Birch St\", \"Luxury Escapes\", \"Italy\", 5500)\n#customer_list.add_customer(9, \"Henry Garcia\", \"henry@example.com\", \"444-333-2222\", \"505 Walnut St\", \"Budget Explore\", \"Germany\", 2100)\n\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nPlans: Brazil\nPrice: 3800\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nPlans: Mexico\nPrice: 3100\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nPlans: Canada\nPrice: 3000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nPlans: Australia\nPrice: 2000\n------------------------\n\n\nThe issue with this is when a customers information is updated only the price updates not the plan as shown below.\n\n\nCode\n# update customer informtion #only changed price \ncustomer_list.update_information(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"606 Pineapple St\", \"Luxury Escape\", \"Brazil\", 5500)\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nPlans: Brazil\nPrice: 5500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nPlans: Mexico\nPrice: 3100\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nPlans: Canada\nPrice: 3000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nPlans: Australia\nPrice: 2000\n------------------------\n\n\nBecoming aware of these difficulties led us to phase 2 - creating a double linked list to deal with the plan and price attributes not being together.\n\n\nDouble Linked List\nWithin the double linked list there are now three classes - PlanNode, Customer and CustomerLinkedList:\n\nThe Customer class does not directly store plan and price information. Instead, it includes a linked list (plan_head) of PlanNode objects, each containing plan and price.\nPlans and their corresponding prices are set within the set_plan method based on a predefined dictionary of plan prices. This ensures consistency and easier management of plan-related data.\nThe CustomerLinkedList class still manages a linked list of customers but follows the second implementation’s structure regarding plan and price storage.\n\nBelow are the updated classes.\n\n\nCode\n# create another linked list: PlanNode and link the plans and prices together\nclass PlanNode:\n    def __init__(self, plan, price):\n        self.plan = plan\n        self.price = price\n        self.next = None\n\nclass Customer:\n    def __init__(self, customer_id, name, email, phone, address, country, plan):\n        self.customer_id = customer_id\n        self.name = name\n        self.email = email\n        self.phone = phone\n        self.address = address\n        self.country = country\n        self.plan_head = None\n        self.set_plan(plan)\n        self.next = None\n\n    def set_plan(self, plan):\n        plans_price = {\n            \"Explorer's Delight\": 3500, \n            \"Luxury Escapes\": 5500,\n            \"Budget Explore\": 2000, \n            \"Family Fun\": 4000,\n            \"Cultural Immersion\": 3000\n        }\n\n        if plan not in plans_price:\n            raise ValueError(\"Invalid plan\")\n        \n        self.add_plan(plan, plans_price[plan])\n\n    def add_plan(self, plan, price):\n        new_plan = PlanNode(plan, price)\n        if not self.plan_head:\n            self.plan_head = new_plan\n        else:\n            current = self.plan_head\n            while current.next:\n                current = current.next\n            current.next = new_plan\n    \n# customer linked list\n# class CustomerNode:\n#     def __init__(self, customer_id, name, email, phone, address, country, plan, price):\n#         self.customer_id = customer_id\n#         self.name = name\n#         self.email = email\n#         self.phone = phone\n#         self.address = address\n#         # plans = [\"Explorer's Delight\", \"Luxury Escapes\", \"Budget Explore\", \"Family Fun\", \"Cultural Immersion\"]\n#         self.plan = plan\n#         self.country = country\n#         self.price = price\n#         self.next = None\n\nclass CustomerLinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def add_customer(self, customer_id, name, email, phone, address, country, plan):\n        new_customer = Customer(customer_id, name, email, phone, address, country, plan)\n\n        if not self.head:\n            self.head = new_customer\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_customer\n\n    def display_customers(self):\n        current = self.head\n        while current:\n            print(\"Customer ID:\", current.customer_id)\n            print(\"Name:\", current.name)\n            print(\"Email:\", current.email)\n            print(\"Phone:\", current.phone)\n            print(\"Address:\", current.address)\n            print(\"Country:\", current.country)\n            print(\"Plans:\")\n            plan_current = current.plan_head\n            while plan_current:\n                print(\"- Plan:\", plan_current.plan)\n                print(\"  Price:\", plan_current.price)\n                plan_current = plan_current.next\n            print(\"------------------------\")\n            current = current.next\n        \n    def view_linked_list(self):\n        current = self.head\n        while current:\n            print(f\"Customer ID: {current.customer_id}\")\n            print(f\"Name: {current.name}\")\n            print(\"------------------------\")\n            current = current.next\n\n    def update_information(self, customer_id, new_name, new_email, new_phone, new_address, new_country, new_plan_name):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.name = new_name\n                current.email = new_email\n                current.phone = new_phone\n                current.address = new_address\n                current.country = new_country\n                current.plan_head = None  \n                current.set_plan(new_plan_name)  \n                return\n            current = current.next\n        print(\"Customer not found.\")\n\n\nHere are the updated results:\n\n\nCode\ncustomer_list = CustomerLinkedList()\n\ncustomer_list.add_customer(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"123 Main St\", \"USA\", \"Explorer's Delight\")\ncustomer_list.add_customer(2, \"Jane Smith\", \"jane@example.com\", \"987-654-3210\", \"456 Elm St\", \"Canada\", \"Luxury Escapes\")\ncustomer_list.add_customer(3, \"Alice Johnson\", \"alice@example.com\", \"555-123-4567\", \"789 Oak St\", \"Australia\", \"Budget Explore\")\ncustomer_list.add_customer(4, \"Bob Brown\", \"bob@example.com\", \"333-555-7777\", \"101 Pine St\", \"UK\", \"Family Fun\")\ncustomer_list.add_customer(5, \"Charlie Davis\", \"charlie@example.com\", \"111-222-3333\", \"202 Cedar St\", \"Spain\", \"Cultural Immersion\")\n#customer_list.add_customer(6, \"Ella Martinez\", \"ella@example.com\", \"999-888-7777\", \"303 Maple St\", \"France\", \"Explorer's Delight\")\n#customer_list.add_customer(7, \"Frank Wilson\", \"frank@example.com\", \"777-888-9999\", \"404 Birch St\", \"Italy\", \"Luxury Escapes\")\n#customer_list.add_customer(8, \"Grace Lee\", \"grace@example.com\", \"666-555-4444\", \"505 Walnut St\", \"Germany\", \"Budget Explore\")\n#customer_list.add_customer(9, \"Henry Garcia\", \"henry@example.com\", \"444-333-2222\", \"606 Pineapple St\", \"Brazil\", \"Family Fun\")\n#customer_list.add_customer(10, \"Isabella Rodriguez\", \"isabella@example.com\", \"222-333-4444\", \"707 Mango St\", \"Mexico\", \"Cultural Immersion\")\n\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nAddress: 123 Main St\nCountry: USA\nPlans:\n- Plan: Explorer's Delight\n  Price: 3500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nAddress: 456 Elm St\nCountry: Canada\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nAddress: 789 Oak St\nCountry: Australia\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nAddress: 101 Pine St\nCountry: UK\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nAddress: 202 Cedar St\nCountry: Spain\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------\n\n\nAs you can see, as the plan updates so does the price.\nOverall, the second implementation offers improved maintainability, flexibility, and scalability compared to the first implementation, making it a preferred choice for managing plan and price data in a customer management system. But, in an attempt to make the Linked List even better we\n\n\nFinal Linked List"
  },
  {
    "objectID": "litreview.html#the-data-behind-crm-systems",
    "href": "litreview.html#the-data-behind-crm-systems",
    "title": "Literature Review",
    "section": "",
    "text": "Customer relationship management, also known as CRM is a key component of a businesses success. CRM is a strategy that companies use in an attempt to manage relationships with previous, current and future customers. CRM helps businesses and companies streamline processes, build relationships, increase sales, improve customer survival as well as a wealth of other benefits.(“What Is CRM (Customer Relationship Management)? - Salesforce.com” n.d.) One benefit that many do not think of is CRM’s impact on a country’s innovation and sustainability efforts. This literature review will highlight the necessity of technologically advanced CRM systems and how it impacts a company’s competitiveness and how crm can improve innovation for a company.\nAs companies get more and more complex, the importance of CRM heightens. CRM is needed to improve service quality and build upon relationships with customers in order to satisfy them to survive in a competitive environment. There are three categories of CRM technology - Operational, Analytical and Cooperational. Operational CRM is the process of communication with a customer from marketing and sale stage till after sales services and receiving feedback is entrusted to a person. Analytical CRM is the tools and techniques used to analyze obtained data from operational CRM. Finally, Cooperational CRM is how customers interact with the company. All three CRM technologies are crucial for the success of a company. For instance, operational CRM without analytical CRM would make no sense as the data would not be used to improve the overall customer experience leading to better performance. In order for a company to compete with others they must utilize all three of these technologies.(Tohidi and Jabbari 2012)\nAnother aspect CRM can improve is companies’ innovativeness. “Customer knowledge management and innovation are the two key modern-firm drivers for a set of successful survival, growth, and development strategies, enhancing business efficiency, performance, and sustainable competitive advantage.”(Gil-Gomez et al. 2020) Essentially, knowledge and innovation are inalienable and inseparable. Meaning that the more knowledge one obtains about their customers, the more they can innovate. Some people even consider CRM to be a sort of Green IT, oriented toward digital transformation and sustainable business model innovation.(Gil-Gomez et al. 2020)\nCRM systems are built on complex software solution systems like client server architecture. The choice of software structure for building CRM systems depends on factors such as organizational requirements, technical capabilities, scalability needs, and budget considerations. Each software structure has its own advantages and disadvantages and depends on a company’s needs. For instance, a small startup would need a very basic architecture with only a couple of clients.\nCustomer relationship management is extremely important when it comes to a company’s success. CRM should not be overlooked as it has the power to improve many aspects of a business, whether the business is small or large."
  }
]