[
  {
    "objectID": "Project.html",
    "href": "Project.html",
    "title": "Mastering CRM Systems - A Deep Dive into CRM Systems and Data Structures",
    "section": "",
    "text": "Question #3 Exploring Applications\nExploration: Examining different applications of the data structure that make it helpful for particular fields\nTopic Chosen:\nCustomer Relationship Management Systems\nIdentify a substantive application of that topic in a field you are interested in: e.g., bioinformatics, marketing, finance, NLP, image processing, operations management, social science:\nMarketing\nWrite a Literature Review section containing a few examples of the use of the topic in your chosen field that are particularly interesting to you:\nYou can find the literature review here.\nCreate a Quarto document or Jupyter notebook containing code that you wrote yourself which illustrates the application of the data structure or algorithm within your domain of interest, describing in your own words (through comments or Markdown text above/below the code) how the code works and what it does.\nOur data structure can be found here."
  },
  {
    "objectID": "Project.html#quarto",
    "href": "Project.html#quarto",
    "title": "Project Walkthrough",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Customer relationship management (CRM) is a crucial component of a businesses success. CRM is software used by a company in an attempt to help them maintain solid relationships with their clients. It is critical for a company’s success specifically when a company is just getting started, specifically, a startup.\nWithin this project, we are acting as a travel startup with the hopes of building a platform to manage a small number of customers utilizing a basic data structure - a linked list."
  },
  {
    "objectID": "rough_linked_list.html",
    "href": "rough_linked_list.html",
    "title": "5200 Project",
    "section": "",
    "text": "# create another linked list: PlanNode and link the plans and prices together\nclass PlanNode:\n    def __init__(self, plan, price):\n        self.plan = plan\n        self.price = price\n        self.next = None\n\nclass Customer:\n    def __init__(self, customer_id, name, email, phone, address, country, plan):\n        self.customer_id = customer_id\n        self.name = name\n        self.email = email\n        self.phone = phone\n        self.address = address\n        self.country = country\n        self.plan_head = None\n        self.set_plan(plan)\n        self.next = None\n\n    def set_plan(self, plan):\n        plans_price = {\n            \"Explorer's Delight\": 3500, \n            \"Luxury Escapes\": 5500,\n            \"Budget Explore\": 2000, \n            \"Family Fun\": 4000,\n            \"Cultural Immersion\": 3000\n        }\n\n        if plan not in plans_price:\n            raise ValueError(\"Invalid plan\")\n        \n        self.add_plan(plan, plans_price[plan])\n\n    def add_plan(self, plan, price):\n        new_plan = PlanNode(plan, price)\n        if not self.plan_head:\n            self.plan_head = new_plan\n        else:\n            current = self.plan_head\n            while current.next:\n                current = current.next\n            current.next = new_plan\n\nclass CustomerLinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def add_customer(self, customer_id, name, email, phone, address, country, plan):\n        new_customer = Customer(customer_id, name, email, phone, address, country, plan)\n\n        if not self.head:\n            self.head = new_customer\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_customer\n\n    def display_customers(self):\n        current = self.head\n        while current:\n            print(\"Customer ID:\", current.customer_id)\n            print(\"Name:\", current.name)\n            print(\"Email:\", current.email)\n            print(\"Phone:\", current.phone)\n            print(\"Address:\", current.address)\n            print(\"Country:\", current.country)\n            print(\"Plans:\")\n            plan_current = current.plan_head\n            while plan_current:\n                print(\"- Plan:\", plan_current.plan)\n                print(\"  Price:\", plan_current.price)\n                plan_current = plan_current.next\n            print(\"------------------------\")\n            current = current.next\n        \n    def view_linked_list(self):\n        current = self.head\n        while current:\n            print(f\"Customer ID: {current.customer_id}\")\n            print(f\"Name: {current.name}\")\n            print(\"------------------------\")\n            current = current.next\n\n    def update_information(self, customer_id, new_name, new_email, new_phone, new_address, new_country, new_plan_name):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.name = new_name\n                current.email = new_email\n                current.phone = new_phone\n                current.address = new_address\n                current.country = new_country\n                current.plan_head = None  \n                current.set_plan(new_plan_name)  \n                return\n            current = current.next\n        print(\"Customer not found.\")\n\n\ncustomer_list = CustomerLinkedList()\n\ncustomer_list.add_customer(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"123 Main St\", \"USA\", \"Explorer's Delight\")\ncustomer_list.add_customer(2, \"Jane Smith\", \"jane@example.com\", \"987-654-3210\", \"456 Elm St\", \"Canada\", \"Luxury Escapes\")\ncustomer_list.add_customer(3, \"Alice Johnson\", \"alice@example.com\", \"555-123-4567\", \"789 Oak St\", \"Australia\", \"Budget Explore\")\ncustomer_list.add_customer(4, \"Bob Brown\", \"bob@example.com\", \"333-555-7777\", \"101 Pine St\", \"UK\", \"Family Fun\")\ncustomer_list.add_customer(5, \"Charlie Davis\", \"charlie@example.com\", \"111-222-3333\", \"202 Cedar St\", \"Spain\", \"Cultural Immersion\")\ncustomer_list.add_customer(6, \"Ella Martinez\", \"ella@example.com\", \"999-888-7777\", \"303 Maple St\", \"France\", \"Explorer's Delight\")\ncustomer_list.add_customer(7, \"Frank Wilson\", \"frank@example.com\", \"777-888-9999\", \"404 Birch St\", \"Italy\", \"Luxury Escapes\")\ncustomer_list.add_customer(8, \"Grace Lee\", \"grace@example.com\", \"666-555-4444\", \"505 Walnut St\", \"Germany\", \"Budget Explore\")\ncustomer_list.add_customer(9, \"Henry Garcia\", \"henry@example.com\", \"444-333-2222\", \"606 Pineapple St\", \"Brazil\", \"Family Fun\")\ncustomer_list.add_customer(10, \"Isabella Rodriguez\", \"isabella@example.com\", \"222-333-4444\", \"707 Mango St\", \"Mexico\", \"Cultural Immersion\")\n\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nAddress: 123 Main St\nCountry: USA\nPlans:\n- Plan: Explorer's Delight\n  Price: 3500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nAddress: 456 Elm St\nCountry: Canada\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nAddress: 789 Oak St\nCountry: Australia\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nAddress: 101 Pine St\nCountry: UK\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nAddress: 202 Cedar St\nCountry: Spain\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nAddress: 303 Maple St\nCountry: France\nPlans:\n- Plan: Explorer's Delight\n  Price: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nAddress: 404 Birch St\nCountry: Italy\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nAddress: 505 Walnut St\nCountry: Germany\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nAddress: 606 Pineapple St\nCountry: Brazil\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 10\nName: Isabella Rodriguez\nEmail: isabella@example.com\nPhone: 222-333-4444\nAddress: 707 Mango St\nCountry: Mexico\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------\n\n\n\n# update information of a customer\ncustomer_list.update_information(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"123 Main St\", \"USA\", \"Luxury Escapes\")\n\n# view the updated list of customers\nprint(\"Updated List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\nUpdated List of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nAddress: 123 Main St\nCountry: USA\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nAddress: 456 Elm St\nCountry: Canada\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nAddress: 789 Oak St\nCountry: Australia\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nAddress: 101 Pine St\nCountry: UK\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nAddress: 202 Cedar St\nCountry: Spain\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nAddress: 303 Maple St\nCountry: France\nPlans:\n- Plan: Explorer's Delight\n  Price: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nAddress: 404 Birch St\nCountry: Italy\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nAddress: 505 Walnut St\nCountry: Germany\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nAddress: 606 Pineapple St\nCountry: Brazil\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 10\nName: Isabella Rodriguez\nEmail: isabella@example.com\nPhone: 222-333-4444\nAddress: 707 Mango St\nCountry: Mexico\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------\n\n\n\n# add new plans nodes in existing customers\n\n&lt;__main__.PlanNode object at 0x10a0f7890&gt;\n\n\n\nclass Customer:\n    def __init__(self, customer_id, name, email, phone, address, country, plan, price):\n        self.customer_id = customer_id\n        self.name = name\n        self.email = email\n        self.phone = phone\n        self.address = address\n        # plans = [\"Explorer's Delight\", \"Luxury Escapes\", \"Budget Explore\", \"Family Fun\", \"Cultural Immersion\"]\n        self.plan = plan\n        self.country = country\n        self.price = price\n        self.next = None\n\nclass CustomerLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_customer(self, customer_id, name, email, phone, address, plan, country, price):\n        new_customer = Customer(customer_id, name, email, phone, address, plan, country, price)\n        if not self.head:\n            self.head = new_customer \n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_customer\n\n    def display_customers(self):\n        current = self.head\n        while current:\n            print(\"Customer ID:\", current.customer_id)\n            print(\"Name:\", current.name)\n            print(\"Email:\", current.email)\n            print(\"Phone:\", current.phone)\n            print(\"Plans:\", current.plan)\n            print(\"Country:\", current.country)\n            print(\"Price:\", current.price)\n            print(\"------------------------\")\n            current = current.next\n            \n    def remove_customer(self):\n        current = self.head \n\n    def update_information(self, customer_id, new_name, new_email, new_phone, new_address, new_plan, new_country, new_price):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.name = new_name\n                current.email = new_email\n                current.phone = new_phone\n                current.address = new_address\n                current.elements = new_plan\n                current.country = new_country\n                current.price = new_price\n                return\n            current = current.next\n\n    def add_customer_feedback(self, customer_id): #this means they have come back from their trip\n        plans = [\"Explorer's Delight\", \"Luxury Escapes\", \"Budget Explore\", \"Family Fun\", \"Cultural Immersion\"]\n        pass\n\n    def export_all_customer_information(self, customer_id):\n        pass\n\n    def add_another_package(self, customer_id, new_package):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.plan.append(new_package)\n                return\n            current = current.next\n\n    def view_linked_list(self):\n        current = self.head\n        while current:\n            print(f\"Customer ID: {current.customer_id}\")\n            print(f\"Name: {current.name}\")\n            print(\"------------------------\")\n            current = current.next\n\n    \n\n# Example usage:\ncustomer_list = CustomerLinkedList()\ncustomer_list.add_customer(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"606 Pineapple St\", \"Family Fun\", \"Brazil\", 3800)\ncustomer_list.add_customer(2, \"Jane Smith\", \"jane@example.com\", \"987-654-3210\", \"707 Mango St\", \"Explorer's Delight\", \"Mexico\", 3100)\ncustomer_list.add_customer(3, \"Alice Johnson\", \"alice@example.com\", \"555-123-4567\", \"456 Elm St\", \"Explorer's Delight\", \"Canada\", 3000)\ncustomer_list.add_customer(4, \"Bob Brown\", \"bob@example.com\", \"333-555-7777\", \"789 Oak St\", \"Budget Explore\", \"Australia\", 2000)\ncustomer_list.add_customer(5, \"Charlie Davis\", \"charlie@example.com\", \"111-222-3333\", \"101 Pine St\", \"Family Fun\", \"UK\", 4000)\ncustomer_list.add_customer(6, \"Ella Martinez\", \"ella@example.com\", \"999-888-7777\", \"202 Cedar St\", \"Cultural Immersion\", \"Spain\", 3500)\ncustomer_list.add_customer(7, \"Frank Wilson\", \"frank@example.com\", \"777-888-9999\", \"303 Maple St\", \"Explorer's Delight\", \"France\", 3200)\ncustomer_list.add_customer(8, \"Grace Lee\", \"grace@example.com\", \"666-555-4444\", \"404 Birch St\", \"Luxury Escapes\", \"Italy\", 5500)\ncustomer_list.add_customer(9, \"Henry Garcia\", \"henry@example.com\", \"444-333-2222\", \"505 Walnut St\", \"Budget Explore\", \"Germany\", 2100)\n\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nPlans: Brazil\nCountry: Family Fun\nPrice: 3800\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nPlans: Mexico\nCountry: Explorer's Delight\nPrice: 3100\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nPlans: Canada\nCountry: Explorer's Delight\nPrice: 3000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nPlans: Australia\nCountry: Budget Explore\nPrice: 2000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nPlans: UK\nCountry: Family Fun\nPrice: 4000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nPlans: Spain\nCountry: Cultural Immersion\nPrice: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nPlans: France\nCountry: Explorer's Delight\nPrice: 3200\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nPlans: Italy\nCountry: Luxury Escapes\nPrice: 5500\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nPlans: Germany\nCountry: Budget Explore\nPrice: 2100\n------------------------\n\n\n\n# update customer informtion\ncustomer_list.update_information(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"606 Pineapple St\", \"Luxury Escape\", \"Brazil\", 5500)\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nPlans: Family Fun\nPrice: 5500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nPlans: Explorer's Delight\nPrice: 3100\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nPlans: Explorer's Delight\nPrice: 3000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nPlans: Budget Explore\nPrice: 2000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nPlans: Family Fun\nPrice: 4000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nPlans: Cultural Immersion\nPrice: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nPlans: Explorer's Delight\nPrice: 3200\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nPlans: Luxury Escapes\nPrice: 5500\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nPlans: Budget Explore\nPrice: 2100\n------------------------\n\n\n\n# view linked list\ncustomer_list.view_linked_list()\n\nCustomer ID: 1\nName: John Doe\n------------------------\nCustomer ID: 2\nName: Jane Smith\n------------------------\nCustomer ID: 3\nName: Alice Johnson\n------------------------\nCustomer ID: 4\nName: Bob Brown\n------------------------\nCustomer ID: 5\nName: Charlie Davis\n------------------------\nCustomer ID: 6\nName: Ella Martinez\n------------------------\nCustomer ID: 7\nName: Frank Wilson\n------------------------\nCustomer ID: 8\nName: Grace Lee\n------------------------\nCustomer ID: 9\nName: Henry Garcia\n------------------------\n\n\n\n# hashmap \n\n\nimport time\n\n# Record start time\nstart_time = time.time()\n\n# Display all customers\ncustomer_list.display_customers()\n\n# Record end time\nend_time = time.time()\n\n# Calculate duration\nduration = end_time - start_time\nprint(\"Time taken to display all customers:\", duration, \"seconds\")\n\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nPlans: Family Fun\nPrice: 5500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nPlans: Explorer's Delight\nPrice: 3100\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nPlans: Explorer's Delight\nPrice: 3000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nPlans: Budget Explore\nPrice: 2000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nPlans: Family Fun\nPrice: 4000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nPlans: Cultural Immersion\nPrice: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nPlans: Explorer's Delight\nPrice: 3200\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nPlans: Luxury Escapes\nPrice: 5500\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nPlans: Budget Explore\nPrice: 2100\n------------------------\nTime taken to display all customers: 0.0002071857452392578 seconds"
  },
  {
    "objectID": "introduction.html#what-is-customer-relationship-management",
    "href": "introduction.html#what-is-customer-relationship-management",
    "title": "Introduction",
    "section": "",
    "text": "Customer relationship management (CRM) is a crucial component of a businesses success. CRM is software used by a company in an attempt to help them maintain solid relationships with their clients. It is critical for a company’s success specifically when a company is just getting started, specifically, a startup.\nWithin this project, we are acting as a travel startup with the hopes of building a platform to manage a small number of customers utilizing a basic data structure - a linked list."
  },
  {
    "objectID": "introduction.html#what-are-linked-lists",
    "href": "introduction.html#what-are-linked-lists",
    "title": "Introduction",
    "section": "What are Linked Lists?",
    "text": "What are Linked Lists?\nLinked lists are the basis of many data structures. They are a fundamental concept in the world of computer science and they have the power to help construct a basic CRM system. A linked list consists of nodes where each node contains data and a reference link to the next node within a sequence. This structure allows for dynamic memory allocation and efficient insertion and deletion operations compared to arrays.(“Linked List Data Structure” n.d.)\nBelow is the basic structure of a linked list."
  },
  {
    "objectID": "introduction.html#crm-and-linked-lists",
    "href": "introduction.html#crm-and-linked-lists",
    "title": "Introduction",
    "section": "CRM and Linked Lists",
    "text": "CRM and Linked Lists\nThe linked list we have created will hold the power to update and edit customer information within the hypothetical CRM system that we are creating. Our CRM system includes client information including name, phone number, address, travel package bought, user ID, country and price. The linked list will allow the employees at the startup to easily access key information about their customers as well as display information to make reports.\nThe CRM system will have the ability to do things like adding customers, removing customers, updating information, and adding multiple packages."
  },
  {
    "objectID": "introduction.html#the-startup",
    "href": "introduction.html#the-startup",
    "title": "Introduction",
    "section": "The Startup",
    "text": "The Startup\nOur startup is a travel company that allows customers to purchase travel packages to countries all around the world. There are five different packages that the company currently offers:\nA V C E R\nThe customer has the option to choose one of these packages and the country they want to travel to, and our startup handles all the logistics.\nTo replicate real information being brought into the startup we have obtained data from the python library faker.\nWe recognize that as this hypothetical startup would grow, the linked list would start to get slower. ADD OTHER OPTIONS HERE\nThis project will walk through the power of a linked list and how crucial it is to computer scientists in truly understanding the fundamentals of data structures and how they can be built upon to improve speed and efficiency.\nV"
  },
  {
    "objectID": "introduction.html#our-startup",
    "href": "introduction.html#our-startup",
    "title": "Introduction",
    "section": "Our Startup",
    "text": "Our Startup\nOur startup is a travel company that allows customers to purchase travel packages to countries all around the world. There are five different packages that the company currently offers:\n\nExplorer’s Delight\nLuxury Escapes\nBudget Explore\nFamily Fun\nCultural Immersion\n\nThe customer has the option to choose one of these packages and the country they want to travel to, and our startup handles all the logistics.\nTo replicate real information being brought into the startup we have obtained data from the python library faker. You can learn more about Faker here.\nThe faker data creates a customer and includes:\n\nName\nAddress\nPhone Number\nCountry\nPlan\nPrice"
  },
  {
    "objectID": "introduction.html#beyond-linked-lists",
    "href": "introduction.html#beyond-linked-lists",
    "title": "Introduction",
    "section": "Beyond Linked Lists",
    "text": "Beyond Linked Lists\nWe recognize that as this hypothetical startup would grow, the linked list would start to face many technical issues such as scalability and security concerns.\nLinked lists can face scalability challenges as the size of the customer database grows. Insertions and deletions in a linked list can be inefficient, especially if the list becomes large. As the CRM system accumulates more customer data and interactions, the performance of the linked list may be inadequate for our startups needs. The solution could be considering more scalable data structures like a hash table.\nFurthermore, linked lists may pose security risks, especially if not implemented securely. In a linked list, nodes can be easily manipulated or accessed if proper access controls are not in place. This vulnerability can lead to data breaches and unauthorized access to sensitive customer information. The solution to this would be to implement robust security measures such as authentication protocols to protect customer data stored in the CRM system.\nWithin this project we will keep our focus on a reliable linked list fully aware of what challenges could arise in the future."
  },
  {
    "objectID": "introduction.html#objectives",
    "href": "introduction.html#objectives",
    "title": "Introduction",
    "section": "Objectives",
    "text": "Objectives\nThis project will walk through the power of a linked list and how crucial it is to computer scientists in truly understanding the fundamentals of data structures and how these structures are the underlying backbone of many software systems."
  },
  {
    "objectID": "litreview.html",
    "href": "litreview.html",
    "title": "Literature Review",
    "section": "",
    "text": "Customer relationship management, also known as CRM is a key component of a businesses success. CRM is a strategy that companies use in an attempt to manage relationships with previous, current and future customers. CRM helps businesses and companies streamline processes, build relationships, increase sales, improve customer survival as well as a wealth of other benefits.(“What Is CRM (Customer Relationship Management)? - Salesforce.com” n.d.) One benefit that many do not think of is CRM’s impact on a country’s innovation and sustainability efforts. This literature review will highlight the necessity of technologically advanced CRM systems and how it impacts a company’s competitiveness and how CRM can improve innovation for a company.\nAs companies get more and more complex, the importance of CRM heightens. CRM is needed to improve service quality and build upon relationships with customers in order to satisfy them to survive in a competitive environment. There are three categories of CRM technology - Operational, Analytical and Cooperational. Operational CRM is the process of communication with a customer from marketing and sale stage till after sales services and receiving feedback is entrusted to a person. Analytical CRM is the tools and techniques used to analyze obtained data from operational CRM. Finally, Cooperational CRM is how customers interact with the company. All three CRM technologies are crucial for the success of a company. For instance, operational CRM without analytical CRM would make no sense as the data would not be used to improve the overall customer experience leading to better performance. In order for a company to compete with others they must utilize all three of these technologies.(Tohidi and Jabbari 2012)\nAnother aspect CRM can improve is companies’ innovativeness. “Customer knowledge management and innovation are the two key modern-firm drivers for a set of successful survival, growth, and development strategies, enhancing business efficiency, performance, and sustainable competitive advantage.”(Gil-Gomez et al. 2020) Essentially, knowledge and innovation are inalienable and inseparable. Meaning that the more knowledge one obtains about their customers, the more they can innovate. Some people even consider CRM to be a sort of Green IT, oriented toward digital transformation and sustainable business model innovation.(Gil-Gomez et al. 2020)\nCRM systems are built on complex software solution systems like client server architecture. The choice of software structure for building CRM systems depends on factors such as organizational requirements, technical capabilities, scalability needs, and budget considerations. Each software structure has its own advantages and disadvantages and depends on a company’s needs. For instance, a small startup would need a very basic architecture with only a couple of clients.\nCustomer relationship management is extremely important when it comes to a company’s success. CRM should not be overlooked as it has the power to improve many aspects of a business, whether the business is small or large."
  },
  {
    "objectID": "litreview.html#the-data-behind-technologically-advance-crm-systems",
    "href": "litreview.html#the-data-behind-technologically-advance-crm-systems",
    "title": "Literature Review",
    "section": "",
    "text": "Customer relationship management, also known as CRM is a key component of a businesses success. CRM is a strategy that companies use in an attempt to manage relationships with previous, current and future customers. CRM helps businesses and companies streamline processes, build relationships, increase sales, improve customer survival as well as a wealth of other benefits. One benefit that many do not think of is CRM’s impact on a country’s innovation and sustainability efforts. This literature review will highlight the necessity of technologically advanced CRM systems and how it impacts a company’s competitiveness and how crm can improve innovation for a company.\nAs companies get more and more complex, the importance of CRM heightens. CRM is needed to improve service quality and build upon relationships with customers in order to satisfy them to survive in a competitive environment. There are three categories of CRM technology - Operational, Analytical and Cooperational. Operational CRM is the process of communication with a customer from marketing and sale stage till after sales services and receiving feedback is entrusted to a person. Analytical CRM is the tools and techniques used to analyze obtained data from operational CRM. Finally, Cooperational CRM is how customers interact with the company. All three CRM technologies are crucial for the success of a company. For instance, operational CRM without analytical CRM would make no sense as the data would not be used to improve the overall customer experience leading to better performance. In order for a company to compete with others they must utilize all three of these technologies.\nAnother aspect CRM can improve is companies’ innovativeness. “Customer knowledge management and innovation are the two key modern-firm drivers for a set of successful survival, growth, and development strategies, enhancing business efficiency, performance, and sustainable competitive advantage.”(https://www.tandfonline.com/doi/full/10.1080/1331677X.2019.1676283) Essentially, knowledge and innovation are inalienable and inseparable. Meaning that the more knowledge one obtains about their customers, the more they can innovate. Some people even consider CRM to be a sort of Green IT, oriented toward digital transformation and sustainable business model innovation.\nCRM systems are built on complex software solution systems like client server architecture. The choice of software structure for building CRM systems depends on factors such as organizational requirements, technical capabilities, scalability needs, and budget considerations. Each software structure has its own advantages and disadvantages and depends on a company’s needs. For instance, a small startup would need a very basic architecture with only a couple of clients.\nCustomer relationship management is extremely important when it comes to a company’s success. CRM should not be overlooked as it has the power to improve many aspects of a business, whether the business is small or large.\n\nhttps://www.tandfonline.com/doi/full/10.1080/1331677X.2019.1676283\nhttps://www.sciencedirect.com/science/article/pii/S2212017312001119\nhttps://journals.sagepub.com/doi/abs/10.1177/2319714518798410"
  },
  {
    "objectID": "introduction.html#our-crm-system",
    "href": "introduction.html#our-crm-system",
    "title": "Introduction",
    "section": "Our CRM System",
    "text": "Our CRM System\nOur developed CRM System will include many functionalities allowing our startup to manage their past current and future customers. To walk through our system visit this link here"
  },
  {
    "objectID": "authors.html",
    "href": "authors.html",
    "title": "About Us",
    "section": "",
    "text": "Kendall Gilbert\nMy name is Kendall Gilbert and I am first year student in the Data Science and Analytics program at Georgetown University. I graduated undergrad from Elon University where I majored in Media Analytics with minors in Statistics and Business Administration. I am passionate about design thinking, machine learning and making a meaningful impact with data.\n\n\nHannah Kim\nMy name is Hannah Kim and I am a first year student in the Data Science and Analytics program at Georgetown University. I graduated from Gachon University in S.Korea with a degree in Software Engineering. I am interested in strategic thinking, using data to solve real-world problems, and using data to drive decision-making."
  },
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "Project Walkthrough",
    "section": "",
    "text": "This project included three phases of Linked Lists\nWithin this page we will walkthrough our thought process and the code we have written in each phase. The three phases built off of eachother and possible issues that could arise wihthin this hypothetical CRM System."
  },
  {
    "objectID": "litreview.html#the-data-behind-crm-systems",
    "href": "litreview.html#the-data-behind-crm-systems",
    "title": "Literature Review",
    "section": "",
    "text": "Customer relationship management, also known as CRM is a key component of a businesses success. CRM is a strategy that companies use in an attempt to manage relationships with previous, current and future customers. CRM helps businesses and companies streamline processes, build relationships, increase sales, improve customer survival as well as a wealth of other benefits.(“What Is CRM (Customer Relationship Management)? - Salesforce.com” n.d.) One benefit that many do not think of is CRM’s impact on a country’s innovation and sustainability efforts. This literature review will highlight the necessity of technologically advanced CRM systems and how it impacts a company’s competitiveness and how CRM can improve innovation for a company.\nAs companies get more and more complex, the importance of CRM heightens. CRM is needed to improve service quality and build upon relationships with customers in order to satisfy them to survive in a competitive environment. There are three categories of CRM technology - Operational, Analytical and Cooperational. Operational CRM is the process of communication with a customer from marketing and sale stage till after sales services and receiving feedback is entrusted to a person. Analytical CRM is the tools and techniques used to analyze obtained data from operational CRM. Finally, Cooperational CRM is how customers interact with the company. All three CRM technologies are crucial for the success of a company. For instance, operational CRM without analytical CRM would make no sense as the data would not be used to improve the overall customer experience leading to better performance. In order for a company to compete with others they must utilize all three of these technologies.(Tohidi and Jabbari 2012)\nAnother aspect CRM can improve is companies’ innovativeness. “Customer knowledge management and innovation are the two key modern-firm drivers for a set of successful survival, growth, and development strategies, enhancing business efficiency, performance, and sustainable competitive advantage.”(Gil-Gomez et al. 2020) Essentially, knowledge and innovation are inalienable and inseparable. Meaning that the more knowledge one obtains about their customers, the more they can innovate. Some people even consider CRM to be a sort of Green IT, oriented toward digital transformation and sustainable business model innovation.(Gil-Gomez et al. 2020)\nCRM systems are built on complex software solution systems like client server architecture. The choice of software structure for building CRM systems depends on factors such as organizational requirements, technical capabilities, scalability needs, and budget considerations. Each software structure has its own advantages and disadvantages and depends on a company’s needs. For instance, a small startup would need a very basic architecture with only a couple of clients.\nCustomer relationship management is extremely important when it comes to a company’s success. CRM should not be overlooked as it has the power to improve many aspects of a business, whether the business is small or large."
  },
  {
    "objectID": "linked_list.html",
    "href": "linked_list.html",
    "title": "1st Linked List",
    "section": "",
    "text": "class Customer:\n    def __init__(self, customer_id, name, email, phone, address, country, plan, price):\n        self.customer_id = customer_id\n        self.name = name\n        self.email = email\n        self.phone = phone\n        self.address = address\n        # plans = [\"Explorer's Delight\", \"Luxury Escapes\", \"Budget Explore\", \"Family Fun\", \"Cultural Immersion\"]\n        self.plan = plan\n        self.country = country\n        self.price = price\n        self.next = None\n\nclass CustomerLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_customer(self, customer_id, name, email, phone, address, plan, country, price):\n        new_customer = Customer(customer_id, name, email, phone, address, plan, country, price)\n        if not self.head:\n            self.head = new_customer \n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_customer\n\n    def display_customers(self):\n        current = self.head\n        while current:\n            print(\"Customer ID:\", current.customer_id)\n            print(\"Name:\", current.name)\n            print(\"Email:\", current.email)\n            print(\"Phone:\", current.phone)\n            print(\"Plans:\", current.plan)\n            print(\"Price:\", current.price)\n            print(\"------------------------\")\n            current = current.next\n            \n    def remove_customer(self):\n        current = self.head \n\n    def update_information(self, customer_id, new_name, new_email, new_phone, new_address, new_plan, new_country, new_price):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.name = new_name\n                current.email = new_email\n                current.phone = new_phone\n                current.address = new_address\n                current.plan = new_plan\n                current.country = new_country\n                current.price = new_price\n                return\n            current = current.next\n\n    def add_customer_feedback(self, customer_id): #this means they have come back from their trip\n        plans = [\"Explorer's Delight\", \"Luxury Escapes\", \"Budget Explore\", \"Family Fun\", \"Cultural Immersion\"]\n        pass\n\n    def export_all_customer_information(self, customer_id):\n        pass\n\n    def add_another_package(self, customer_id, new_package):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.plan.append(new_package)\n                return\n            current = current.next\n\n    def view_linked_list(self):\n        current = self.head\n        while current:\n            print(f\"Customer ID: {current.customer_id}\")\n            print(f\"Name: {current.name}\")\n            print(\"------------------------\")\n            current = current.next\n\n    \n\n# Example usage:\ncustomer_list = CustomerLinkedList()\ncustomer_list.add_customer(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"606 Pineapple St\", \"Family Fun\", \"Brazil\", 3800)\ncustomer_list.add_customer(2, \"Jane Smith\", \"jane@example.com\", \"987-654-3210\", \"707 Mango St\", \"Explorer's Delight\", \"Mexico\", 3100)\ncustomer_list.add_customer(3, \"Alice Johnson\", \"alice@example.com\", \"555-123-4567\", \"456 Elm St\", \"Explorer's Delight\", \"Canada\", 3000)\ncustomer_list.add_customer(4, \"Bob Brown\", \"bob@example.com\", \"333-555-7777\", \"789 Oak St\", \"Budget Explore\", \"Australia\", 2000)\ncustomer_list.add_customer(5, \"Charlie Davis\", \"charlie@example.com\", \"111-222-3333\", \"101 Pine St\", \"Family Fun\", \"UK\", 4000)\ncustomer_list.add_customer(6, \"Ella Martinez\", \"ella@example.com\", \"999-888-7777\", \"202 Cedar St\", \"Cultural Immersion\", \"Spain\", 3500)\ncustomer_list.add_customer(7, \"Frank Wilson\", \"frank@example.com\", \"777-888-9999\", \"303 Maple St\", \"Explorer's Delight\", \"France\", 3200)\ncustomer_list.add_customer(8, \"Grace Lee\", \"grace@example.com\", \"666-555-4444\", \"404 Birch St\", \"Luxury Escapes\", \"Italy\", 5500)\ncustomer_list.add_customer(9, \"Henry Garcia\", \"henry@example.com\", \"444-333-2222\", \"505 Walnut St\", \"Budget Explore\", \"Germany\", 2100)\n\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nPlans: Brazil\nPrice: 3800\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nPlans: Mexico\nPrice: 3100\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nPlans: Canada\nPrice: 3000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nPlans: Australia\nPrice: 2000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nPlans: UK\nPrice: 4000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nPlans: Spain\nPrice: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nPlans: France\nPrice: 3200\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nPlans: Italy\nPrice: 5500\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nPlans: Germany\nPrice: 2100\n------------------------\n# update customer informtion\ncustomer_list.update_information(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"606 Pineapple St\", \"Luxury Escape\", \"Brazil\", 5500)\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nPlans: Luxury Escape\nPrice: 5500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nPlans: Mexico\nPrice: 3100\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nPlans: Canada\nPrice: 3000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nPlans: Australia\nPrice: 2000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nPlans: UK\nPrice: 4000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nPlans: Spain\nPrice: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nPlans: France\nPrice: 3200\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nPlans: Italy\nPrice: 5500\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nPlans: Germany\nPrice: 2100\n------------------------\n# view linked list\ncustomer_list.view_linked_list()\n\nCustomer ID: 1\nName: John Doe\n------------------------\nCustomer ID: 2\nName: Jane Smith\n------------------------\nCustomer ID: 3\nName: Alice Johnson\n------------------------\nCustomer ID: 4\nName: Bob Brown\n------------------------\nCustomer ID: 5\nName: Charlie Davis\n------------------------\nCustomer ID: 6\nName: Ella Martinez\n------------------------\nCustomer ID: 7\nName: Frank Wilson\n------------------------\nCustomer ID: 8\nName: Grace Lee\n------------------------\nCustomer ID: 9\nName: Henry Garcia\n------------------------\nLimitations: unable to update the customers’ information."
  },
  {
    "objectID": "linked_list.html#nd-linked-list",
    "href": "linked_list.html#nd-linked-list",
    "title": "1st Linked List",
    "section": "2nd Linked List",
    "text": "2nd Linked List\n\n# create another linked list: PlanNode and link the plans and prices together\nplans_price = {\n            \"Explorer's Delight\": 3500, \n            \"Luxury Escapes\": 5500,\n            \"Budget Explore\": 2000, \n            \"Family Fun\": 4000,\n            \"Cultural Immersion\": 3000\n        }\n\nclass PlanNode:\n    def __init__(self, plan, price):\n        self.plan = plan\n        self.price = price\n        self.next = None\n\nclass Customer:\n    def __init__(self, customer_id, name, email, phone, address, country, plan):\n        self.customer_id = customer_id\n        self.name = name\n        self.email = email\n        self.phone = phone\n        self.address = address\n        self.country = country\n        self.plan_head = None\n        self.set_plan(plan)\n        self.next = None\n\n    def set_plan(self, plan):\n        if plan not in plans_price:\n            raise ValueError(\"Invalid plan\")\n        \n        self.add_plan(plan)\n\n    def add_plan(self, plan):\n        new_plan = PlanNode(plan, plans_price[plan])\n        if not self.plan_head:\n            self.plan_head = new_plan\n        else:\n            current = self.plan_head\n            while current.next:\n                current = current.next\n            current.next = new_plan\n\nclass CustomerLinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def add_customer(self, customer_id, name, email, phone, address, country, plan):\n        new_customer = Customer(customer_id, name, email, phone, address, country, plan)\n\n        if not self.head:\n            self.head = new_customer\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_customer\n\n    def display_customers(self):\n        current = self.head\n        while current:\n            print(\"Customer ID:\", current.customer_id)\n            print(\"Name:\", current.name)\n            print(\"Email:\", current.email)\n            print(\"Phone:\", current.phone)\n            print(\"Address:\", current.address)\n            print(\"Country:\", current.country)\n            print(\"Plans:\")\n            plan_current = current.plan_head\n            while plan_current:\n                print(\"- Plan:\", plan_current.plan)\n                print(\"  Price:\", plan_current.price)\n                plan_current = plan_current.next\n            print(\"------------------------\")\n            current = current.next\n        \n    def view_linked_list(self):\n        current = self.head\n        while current:\n            print(f\"Customer ID: {current.customer_id}\")\n            print(f\"Name: {current.name}\")\n            print(\"------------------------\")\n            current = current.next\n\n    def update_information(self, customer_id, new_name, new_email, new_phone, new_address, new_country, new_plan_name):\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                current.name = new_name\n                current.email = new_email\n                current.phone = new_phone\n                current.address = new_address\n                current.country = new_country\n                current.plan_head = None  \n                current.set_plan(new_plan_name)  \n                return\n            current = current.next\n        print(\"Customer not found.\")\n        \n    def remove_customer(self, customer_id):\n        if not self.head:\n            print(\"No customers in the list.\")\n            return\n\n        if self.head.customer_id == customer_id:\n            self.head = self.head.next\n            print(\"Customer removed successfully.\")\n            return\n\n        prev = None\n        current = self.head\n        while current:\n            if current.customer_id == customer_id:\n                prev.next = current.next\n                print(\"Customer removed successfully.\")\n                return\n            prev = current\n            current = current.next\n\n        print(\"Customer not found.\")\n\n\ncustomer_list = CustomerLinkedList()\n\ncustomer_list.add_customer(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"123 Main St\", \"USA\", \"Explorer's Delight\")\ncustomer_list.add_customer(2, \"Jane Smith\", \"jane@example.com\", \"987-654-3210\", \"456 Elm St\", \"Canada\", \"Luxury Escapes\")\ncustomer_list.add_customer(3, \"Alice Johnson\", \"alice@example.com\", \"555-123-4567\", \"789 Oak St\", \"Australia\", \"Budget Explore\")\ncustomer_list.add_customer(4, \"Bob Brown\", \"bob@example.com\", \"333-555-7777\", \"101 Pine St\", \"UK\", \"Family Fun\")\ncustomer_list.add_customer(5, \"Charlie Davis\", \"charlie@example.com\", \"111-222-3333\", \"202 Cedar St\", \"Spain\", \"Cultural Immersion\")\ncustomer_list.add_customer(6, \"Ella Martinez\", \"ella@example.com\", \"999-888-7777\", \"303 Maple St\", \"France\", \"Explorer's Delight\")\ncustomer_list.add_customer(7, \"Frank Wilson\", \"frank@example.com\", \"777-888-9999\", \"404 Birch St\", \"Italy\", \"Luxury Escapes\")\ncustomer_list.add_customer(8, \"Grace Lee\", \"grace@example.com\", \"666-555-4444\", \"505 Walnut St\", \"Germany\", \"Budget Explore\")\ncustomer_list.add_customer(9, \"Henry Garcia\", \"henry@example.com\", \"444-333-2222\", \"606 Pineapple St\", \"Brazil\", \"Family Fun\")\ncustomer_list.add_customer(10, \"Isabella Rodriguez\", \"isabella@example.com\", \"222-333-4444\", \"707 Mango St\", \"Mexico\", \"Cultural Immersion\")\n\nprint(\"List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\nList of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nAddress: 123 Main St\nCountry: USA\nPlans:\n- Plan: Explorer's Delight\n  Price: 3500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nAddress: 456 Elm St\nCountry: Canada\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nAddress: 789 Oak St\nCountry: Australia\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nAddress: 101 Pine St\nCountry: UK\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nAddress: 202 Cedar St\nCountry: Spain\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nAddress: 303 Maple St\nCountry: France\nPlans:\n- Plan: Explorer's Delight\n  Price: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nAddress: 404 Birch St\nCountry: Italy\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nAddress: 505 Walnut St\nCountry: Germany\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nAddress: 606 Pineapple St\nCountry: Brazil\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 10\nName: Isabella Rodriguez\nEmail: isabella@example.com\nPhone: 222-333-4444\nAddress: 707 Mango St\nCountry: Mexico\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------\n\n\n\n# update information of a customer\ncustomer_list.update_information(1, \"John Doe\", \"john@example.com\", \"123-456-7890\", \"123 Main St\", \"USA\", \"Luxury Escapes\")\n\n# view the updated list of customers\nprint(\"Updated List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()\n\nUpdated List of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nAddress: 123 Main St\nCountry: USA\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nAddress: 456 Elm St\nCountry: Canada\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nAddress: 789 Oak St\nCountry: Australia\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nAddress: 101 Pine St\nCountry: UK\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nAddress: 202 Cedar St\nCountry: Spain\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nAddress: 303 Maple St\nCountry: France\nPlans:\n- Plan: Explorer's Delight\n  Price: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nAddress: 404 Birch St\nCountry: Italy\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nAddress: 505 Walnut St\nCountry: Germany\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nAddress: 606 Pineapple St\nCountry: Brazil\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 10\nName: Isabella Rodriguez\nEmail: isabella@example.com\nPhone: 222-333-4444\nAddress: 707 Mango St\nCountry: Mexico\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------"
  },
  {
    "objectID": "linked_list.html#add-new-package-to-existing-customer",
    "href": "linked_list.html#add-new-package-to-existing-customer",
    "title": "1st Linked List",
    "section": "Add new package to existing customer",
    "text": "Add new package to existing customer\n\n# add new plans nodes in existing customers\ncurrent_customer = customer_list.head\nwhile current_customer:\n    if current_customer.customer_id == 1:\n        current_customer.add_plan(\"Budget Explore\")\n        break\n\n    current_customer = current_customer.next\n\nprint(\"Updated List of Customers:\")\nprint(\"------------------------\")\ncustomer_list.display_customers()       \n\nUpdated List of Customers:\n------------------------\nCustomer ID: 1\nName: John Doe\nEmail: john@example.com\nPhone: 123-456-7890\nAddress: 123 Main St\nCountry: USA\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 2\nName: Jane Smith\nEmail: jane@example.com\nPhone: 987-654-3210\nAddress: 456 Elm St\nCountry: Canada\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 3\nName: Alice Johnson\nEmail: alice@example.com\nPhone: 555-123-4567\nAddress: 789 Oak St\nCountry: Australia\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 4\nName: Bob Brown\nEmail: bob@example.com\nPhone: 333-555-7777\nAddress: 101 Pine St\nCountry: UK\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 5\nName: Charlie Davis\nEmail: charlie@example.com\nPhone: 111-222-3333\nAddress: 202 Cedar St\nCountry: Spain\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------\nCustomer ID: 6\nName: Ella Martinez\nEmail: ella@example.com\nPhone: 999-888-7777\nAddress: 303 Maple St\nCountry: France\nPlans:\n- Plan: Explorer's Delight\n  Price: 3500\n------------------------\nCustomer ID: 7\nName: Frank Wilson\nEmail: frank@example.com\nPhone: 777-888-9999\nAddress: 404 Birch St\nCountry: Italy\nPlans:\n- Plan: Luxury Escapes\n  Price: 5500\n------------------------\nCustomer ID: 8\nName: Grace Lee\nEmail: grace@example.com\nPhone: 666-555-4444\nAddress: 505 Walnut St\nCountry: Germany\nPlans:\n- Plan: Budget Explore\n  Price: 2000\n------------------------\nCustomer ID: 9\nName: Henry Garcia\nEmail: henry@example.com\nPhone: 444-333-2222\nAddress: 606 Pineapple St\nCountry: Brazil\nPlans:\n- Plan: Family Fun\n  Price: 4000\n------------------------\nCustomer ID: 10\nName: Isabella Rodriguez\nEmail: isabella@example.com\nPhone: 222-333-4444\nAddress: 707 Mango St\nCountry: Mexico\nPlans:\n- Plan: Cultural Immersion\n  Price: 3000\n------------------------"
  },
  {
    "objectID": "code.html#summary",
    "href": "code.html#summary",
    "title": "Project Walkthrough",
    "section": "Summary",
    "text": "Summary\nPreliminary Linked List:\n\nCustomer and CustomerLinkedList Classes - Initially, we structured the linked list with a Customer class representing individual customers and a CustomerLinkedList class managing a list of customers.\nPlan Integration - Each customer had a linked list of plans associated with them, allowing for flexibility in managing multiple plans for each customer.\nSet and Add Plan Methods - These methods facilitated the setting and addition of plans to customers’ linked lists.\nDisplay Customers and Update Information - Methods were provided for displaying customer information and updating it, although faced with some issues in updating plan information.\n\nDouble Linked List:\n\nIntroduction of PlanNode - Added to address issues with updating plan information independently of prices, we introduced a PlanNode class to link plans and prices together.\nRefinement of Customer Class - The Customer class was updated to store a linked list of PlanNode objects instead of directly storing plan and price attributes.\nUpdated Methods - Methods for adding customers and displaying customer information remained the same.\n\nFinal Linked List:\n\nEnhanced Plan Addition - Recognizing the need for customers to purchase multiple plans, we implemented the ability to add additional plans and prices to customers’ linked lists.\nDynamic Updates - The code provided showcases how customers’ plans can be updated dynamically, allowing for flexibility in managing changing customer preferences.\n\nVisualizing Linked List\n\nWe provided a visualization of the linked list in an attempt to illustrate the structure of this linked list. Although it only includes the customer ID, name, package and prices, it is missing the other information.\n\nOverall, each phase of development demonstrates a progressive improvement of our Linked List implementation. We addressed issues with functionality along the way. The final implementation provides a robust solution for managing customers and their plans, with flexibility to accommodate changes and additions over time. We are aware of the drawbacks that come with the usage of linked lists (as highlited in the introduction) and it would be interesting in the future to explore how to implement this CRM linked list structure into a usable software architecture."
  },
  {
    "objectID": "linked_list.html#visualizing-linked-list",
    "href": "linked_list.html#visualizing-linked-list",
    "title": "1st Linked List",
    "section": "Visualizing Linked List",
    "text": "Visualizing Linked List\n\n# visualization\nfrom IPython.display import display\nimport graphviz as gv # for visualizing a tree using Digraph\nfrom graphviz import Digraph, nohtml\n\n\ndef visualize_ll(ll):\n  dot = Digraph(\n      graph_attr={'rankdir': 'LR'},\n      node_attr={'shape': 'record', 'height': '.1'}\n    )\n  visited_nodes = set() # reduce runtime to O(1); more efficient\n  node_pointer = ll.head\n  while node_pointer is not None:\n    # New node\n    cur_id = str(node_pointer.customer_id)\n    cur_name = str(node_pointer.name)\n    if cur_name in visited_nodes:\n      break\n    plan_info = \"\"\n    cur_plan = node_pointer.plan_head\n    while cur_plan:\n      plan_info += cur_plan.plan + \": $\" + str(cur_plan.price) + \"\\\\n\"\n      cur_plan = cur_plan.next\n  \n    dot.node(name=cur_name, label=nohtml('{{ '+ cur_id + \"|\" + cur_name + \"|\" + plan_info + '} \\n' + '|&lt;f1&gt;}'))\n\n    # And edge from prev to cur, if not None\n    if node_pointer.next is not None:\n      # edge_from = f'{cur_name}:f1'\n      next_name = str(node_pointer.next.name)\n      dot.edge(cur_name, next_name)\n    # Now we can update prev_node_name\n    # visited_nodes.add(cur_name)\n    # prev_node_name = cur_name\n    node_pointer = node_pointer.next\n  display(dot)\n\nvisualize_ll(customer_list)"
  },
  {
    "objectID": "code.html#summary-conclusion",
    "href": "code.html#summary-conclusion",
    "title": "Project Walkthrough",
    "section": "Summary / Conclusion",
    "text": "Summary / Conclusion\nPreliminary Linked List:\n\nCustomer and CustomerLinkedList Classes - Initially, we structured the linked list with a Customer class representing individual customers and a CustomerLinkedList class managing a list of customers.\nPlan Integration - Each customer had a linked list of plans associated with them, allowing for flexibility in managing multiple plans for each customer.\nSet and Add Plan Methods - These methods facilitated the setting and addition of plans to customers’ linked lists.\nDisplay Customers and Update Information - Methods were provided for displaying customer information and updating it, although faced with some issues in updating plan information.\n\nDouble Linked List:\n\nIntroduction of PlanNode - Added to address issues with updating plan information independently of prices, we introduced a PlanNode class to link plans and prices together.\nRefinement of Customer Class - The Customer class was updated to store a linked list of PlanNode objects instead of directly storing plan and price attributes.\nUpdated Methods - Methods for adding customers and displaying customer information remained the same.\n\nFinal Linked List:\n\nEnhanced Plan Addition - Recognizing the need for customers to purchase multiple plans, we implemented the ability to add additional plans and prices to customers’ linked lists.\nDynamic Updates - The code provided showcases how customers’ plans can be updated dynamically, allowing for flexibility in managing changing customer preferences.\n\nVisualizing Linked List\n\nWe provided a visualization of the linked list in an attempt to illustrate the structure of this linked list. Although it only includes the customer ID, name, package and prices, it is missing the other information.\n\nOverall, each phase of development demonstrates a progressive improvement of our Linked List implementation. We addressed issues with functionality along the way. The final implementation provides a robust solution for managing customers and their plans, with flexibility to accommodate changes and additions over time.\nWe are aware of the drawbacks that come with the usage of linked lists (as highlited in the introduction) and it would be interesting in the future to explore how to implement this CRM linked list structure into a usable software architecture for a startup, like the one we have brainstormed or how to make it faster if the number of customers was to grow.\nThis project provided us with the opportunity to master our proficiency in data structures, specifically linked lists, and think outside the box when it comes to data structures in specific industries. It is beneficial to take a step back from the computer science and bridge the technical work with how it can help a company, and this exploration allowed us to do so.\nThanks for reading, we hope you enjoyed!"
  }
]