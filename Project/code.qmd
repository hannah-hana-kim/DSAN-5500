---
title: "Project Walkthrough"
code-fold: true
format: 
  html:
    embed-resources: true
    toc: true
    code-fold: true

---

This project included three phases of Linked Lists

1. Preliminary Linked List 
2. Nested Linked List 
3. Final Linked List

Within this page we will walkthrough our thought process and the code we have written in each phase. The three phases built off of eachother and possible issues that could arise wihthin this hypothetical CRM System.

### Phase 1 - Preliminary Linked List 

Within the preliminary linked list we decided how the linked list would be structured. 

This linked list was structured into two classes customerclass and customerlinkedlist class.

First is the customerclass which initialized the customer and plan functionality. This implementation allows each customer to have a list of information associated with them. 

**Customer Class**
```{python}
class Customer:
    def __init__(self, customer_id, name, email, phone, address, country, plan, price):
        self.customer_id = customer_id
        self.name = name
        self.email = email
        self.phone = phone
        self.address = address
        plans = ["Explorer's Delight", "Luxury Escapes", "Budget Explore", "Family Fun", "Cultural Immersion"]
        self.plan = plan
        self.country = country
        self.price = price
        self.next = None
```

Next is the Customer Linked List that includes functions that can edit customer information. 

**CustomerLinkedList Class**
```{python}  
class CustomerLinkedList:
    def __init__(self):
        self.head = None

    def add_customer(self, customer_id, name, email, phone, address, plan, country, price):
        new_customer = Customer(customer_id, name, email, phone, address, plan, country, price)
        if not self.head:
            self.head = new_customer 
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_customer

    def display_customers(self):
        current = self.head
        while current:
            print("Customer ID:", current.customer_id)
            print("Name:", current.name)
            print("Email:", current.email)
            print("Phone:", current.phone)
            print("Address:", current.address)  # Include address
            print("Country:", current.country)  # Include country
            print("Plans:", current.plan)
            print("Price:", current.price)
            print("------------------------")
            current = current.next

    def remove_customer(self, customer_id):
        if not self.head:
            print("No customers in the list.")
            return

        if self.head.customer_id == customer_id:
            self.head = self.head.next
            print("Customer removed successfully.")
            return

        prev = None
        current = self.head
        while current:
            if current.customer_id == customer_id:
                prev.next = current.next
                print("Customer removed successfully.")
                return
            prev = current
            current = current.next

        print("Customer not found.")

    def update_information(self, customer_id, new_name, new_email, new_phone, new_address, new_plan, new_country, new_price):
        current = self.head
        while current:
            if current.customer_id == customer_id:
                current.name = new_name
                current.email = new_email
                current.phone = new_phone
                current.address = new_address
                current.plan = new_plan
                current.country = new_country
                current.price = new_price
                return
            current = current.next

    def add_customer_feedback(self, customer_id): #this means they have come back from their trip
        plans = ["Explorer's Delight", "Luxury Escapes", "Budget Explore", "Family Fun", "Cultural Immersion"]
        pass

    def export_all_customer_information(self, customer_id):
        pass

    def add_another_package(self, customer_id, new_package):
        current = self.head
        while current:
            if current.customer_id == customer_id:
                current.plan.append(new_package)
                return
            current = current.next

    def view_linked_list(self):
        current = self.head
        while current:
            print(f"Customer ID: {current.customer_id}")
            print(f"Name: {current.name}")
            print("------------------------")
            current = current.next
    
```

- add_customer method adds a new customer to the linked list.
- display_customers method prints information of all customers in the linked list.
- remove_customer method allows for the removal of a customer. 
- update_information method updates information of a customer identified by their ID.
- add_another_package method adds a new package to a customer's plan identified by their ID.
- view_linked_list method prints basic information of all customers in the linked list.

As you can see, this linked list gives us a good idea of what out final linked list would entail. To test out the linked list we ran it with the customers created by the faker data library. 

**Phase 1 Report**

```{python} 
# Example usage:
customer_list = CustomerLinkedList()
customer_list.add_customer(1, "John Doe", "john@example.com", "123-456-7890", "606 Pineapple St", "Family Fun", "Brazil", 3800)
customer_list.add_customer(2, "Jane Smith", "jane@example.com", "987-654-3210", "707 Mango St", "Explorer's Delight", "Mexico", 3100)
customer_list.add_customer(3, "Alice Johnson", "alice@example.com", "555-123-4567", "456 Elm St", "Explorer's Delight", "Canada", 3000)
#customer_list.add_customer(4, "Bob Brown", "bob@example.com", "333-555-7777", "789 Oak St", "Budget Explore", "Australia", 2000)
#customer_list.add_customer(6, "Ella Martinez", "ella@example.com", "999-888-7777", "202 Cedar St", "Cultural Immersion", "Spain", 3500)
#customer_list.add_customer(7, "Frank Wilson", "frank@example.com", "777-888-9999", "303 Maple St", "Explorer's Delight", "France", 3200)
#customer_list.add_customer(8, "Grace Lee", "grace@example.com", "666-555-4444", "404 Birch St", "Luxury Escapes", "Italy", 5500)
#customer_list.add_customer(9, "Henry Garcia", "henry@example.com", "444-333-2222", "505 Walnut St", "Budget Explore", "Germany", 2100)

print("List of Customers:")
print("------------------------")
customer_list.display_customers()
```

There are a few issues with this report:

- Country and Plans are getting mixed up 
- Plans and Price need to be linked together
- If a plan is changed, the price is not updated

Becoming aware of these difficulties led us to phase 2 - creating a nested linked list to deal with the plan and price attributes not being together as well as tweaking other errors.

### Phase 2 - Nested Linked List

Within the double linked list there are now three classes - PlanNode, Customer and CustomerLinkedList. 

The updates implemented include:

- The Customer class does not directly store plan and price information. Instead, it includes a linked list of PlanNode objects, each containing plan and price.
- Plans and their corresponding prices are set within the set_plan method based on a predefined dictionary of plan prices. This ensures consistency and easier management of plan-related data.
- The CustomerLinkedList class still manages a linked list of customers but follows the second implementation's structure regarding plan and price storage.

**Nested Linked List**
```{python}
# create another linked list: PlanNode and link the plans and prices together
class PlanNode:
    def __init__(self, plan, price):
        self.plan = plan
        self.price = price
        self.next = None

class Customer:
    def __init__(self, customer_id, name, email, phone, address, country, plan):
        self.customer_id = customer_id
        self.name = name
        self.email = email
        self.phone = phone
        self.address = address
        self.country = country
        self.plan_head = None
        self.set_plan(plan)
        self.next = None

    def set_plan(self, plan):
        plans_price = {
            "Explorer's Delight": 3500, 
            "Luxury Escapes": 5500,
            "Budget Explore": 2000, 
            "Family Fun": 4000,
            "Cultural Immersion": 3000
        }

        if plan not in plans_price:
            raise ValueError("Invalid plan")
        
        self.add_plan(plan, plans_price[plan])

    def add_plan(self, plan, price):
        new_plan = PlanNode(plan, price)
        if not self.plan_head:
            self.plan_head = new_plan
        else:
            current = self.plan_head
            while current.next:
                current = current.next
            current.next = new_plan
    
class CustomerLinkedList:
    def __init__(self):
        self.head = None
    
    def add_customer(self, customer_id, name, email, phone, address, country, plan):
        new_customer = Customer(customer_id, name, email, phone, address, country, plan)

        if not self.head:
            self.head = new_customer
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_customer
    def remove_customer(self, customer_id):
        if not self.head:
            print("No customers in the list.")
            return

        if self.head.customer_id == customer_id:
            self.head = self.head.next
            print("Customer removed successfully.")
            return

        prev = None
        current = self.head
        while current:
            if current.customer_id == customer_id:
                prev.next = current.next
                print("Customer removed successfully.")
                return
            prev = current
            current = current.next

        print("Customer not found.")

    def display_customers(self):
        current = self.head
        while current:
            print("Customer ID:", current.customer_id)
            print("Name:", current.name)
            print("Email:", current.email)
            print("Phone:", current.phone)
            print("Address:", current.address)
            print("Country:", current.country)
            print("Plans:")
            plan_current = current.plan_head
            while plan_current:
                print("- Plan:", plan_current.plan)
                print("  Price:", plan_current.price)
                plan_current = plan_current.next
            print("------------------------")
            current = current.next
        
    def view_linked_list(self):
        current = self.head
        while current:
            print(f"Customer ID: {current.customer_id}")
            print(f"Name: {current.name}")
            print("------------------------")
            current = current.next

    def update_information(self, customer_id, new_name, new_email, new_phone, new_address, new_country, new_plan_name):
        current = self.head
        while current:
            if current.customer_id == customer_id:
                current.name = new_name
                current.email = new_email
                current.phone = new_phone
                current.address = new_address
                current.country = new_country
                current.plan_head = None  
                current.set_plan(new_plan_name)  
                return
            current = current.next
        print("Customer not found.")
```

Here are the updated results:

**Phase 2 Report**
```{python}
customer_list = CustomerLinkedList()

customer_list.add_customer(1, "John Doe", "john@example.com", "123-456-7890", "123 Main St", "USA", "Explorer's Delight")
customer_list.add_customer(2, "Jane Smith", "jane@example.com", "987-654-3210", "456 Elm St", "Canada", "Luxury Escapes")
customer_list.add_customer(3, "Alice Johnson", "alice@example.com", "555-123-4567", "789 Oak St", "Australia", "Budget Explore")
#customer_list.add_customer(4, "Bob Brown", "bob@example.com", "333-555-7777", "101 Pine St", "UK", "Family Fun")
#customer_list.add_customer(5, "Charlie Davis", "charlie@example.com", "111-222-3333", "202 Cedar St", "Spain", "Cultural Immersion")
#customer_list.add_customer(6, "Ella Martinez", "ella@example.com", "999-888-7777", "303 Maple St", "France", "Explorer's Delight")
#customer_list.add_customer(7, "Frank Wilson", "frank@example.com", "777-888-9999", "404 Birch St", "Italy", "Luxury Escapes")
#customer_list.add_customer(8, "Grace Lee", "grace@example.com", "666-555-4444", "505 Walnut St", "Germany", "Budget Explore")
#customer_list.add_customer(9, "Henry Garcia", "henry@example.com", "444-333-2222", "606 Pineapple St", "Brazil", "Family Fun")
#customer_list.add_customer(10, "Isabella Rodriguez", "isabella@example.com", "222-333-4444", "707 Mango St", "Mexico", "Cultural Immersion")

print("List of Customers:")
print("------------------------")
customer_list.display_customers()
```

As you can see, as the plan updates so does the price. 

Overall, the second implementation offers improved maintainability, flexibility, and scalability compared to the first implementation, making it a preferred choice for managing plan and price data in a customer management system. But, in an attempt to make the Linked List even better we brainstormed how to allow two packages per customer. 

### Phase 3 - Final Linked List

Finally, we wanted to dive deeper thinking about what could be done if a customer wanted to purchase more than one package. The code below implements adding a package plan and price to the linked list. 

This was created to address that this linked list will get complicated very quickly and customers will often change their mind or purchase from the company again. 

```{python}
current_customer = customer_list.head
while current_customer:
    if current_customer.customer_id == 1:
        current_customer.add_plan("Budget Explore", 5000)

    current_customer = current_customer.next

print("Updated Customers:")
print("------------------------")
customer_list.display_customers() 
```

As illustrated by the results, we have implemented the possibility to add more than one plan to a customer. 

### Visualizing Linked List

To display what our linked list would look like if illustrated, we have utilized the python library graphviz.

As shown below, John has purchase two packages - Explorer's Delight and Budget Explore, Jane has purchased luxury escape and Alice has purchased Budge Explore. 

```{python echo=FALSE}
# visualization
from IPython.display import display
import graphviz as gv # for visualizing a tree using Digraph
from graphviz import Digraph, nohtml
```

```{python}
def visualize_ll(ll):
  dot = Digraph(
      graph_attr={'rankdir': 'LR'},
      node_attr={'shape': 'record', 'height': '.1'}
    )
  visited_nodes = set() # reduce runtime to O(1); more efficient
  node_pointer = ll.head
  while node_pointer is not None:
    # New node
    cur_id = str(node_pointer.customer_id)
    cur_name = str(node_pointer.name)
    if cur_name in visited_nodes:
      break
    plan_info = ""
    cur_plan = node_pointer.plan_head
    while cur_plan:
      plan_info += cur_plan.plan + ": $" + str(cur_plan.price) + "\\n"
      cur_plan = cur_plan.next
  
    dot.node(name=cur_name, label=nohtml('{{ '+ cur_id + "|" + cur_name + "|" + plan_info + '} \n' + '|<f1>}'))

    # And edge from prev to cur, if not None
    if node_pointer.next is not None:
      # edge_from = f'{cur_name}:f1'
      next_name = str(node_pointer.next.name)
      dot.edge(cur_name, next_name)
    # Now we can update prev_node_name
    # visited_nodes.add(cur_name)
    # prev_node_name = cur_name
    node_pointer = node_pointer.next
  display(dot)

visualize_ll(customer_list)
```


## Summary / Conclusion

**Preliminary Linked List:**

- Customer and CustomerLinkedList Classes - Initially, we structured the linked list with a Customer class representing individual customers and a CustomerLinkedList class managing a list of customers.

- Plan Integration - Each customer had a linked list of plans associated with them, allowing for flexibility in managing multiple plans for each customer.

- Set and Add Plan Methods - These methods facilitated the setting and addition of plans to customers' linked lists.

- Display Customers and Update Information - Methods were provided for displaying customer information and updating it, although faced with some issues in updating plan information.

**Double Linked List:**

- Introduction of PlanNode - Added to address issues with updating plan information independently of prices, we introduced a PlanNode class to link plans and prices together.

- Refinement of Customer Class - The Customer class was updated to store a linked list of PlanNode objects instead of directly storing plan and price attributes.

- Updated Methods - Methods for adding customers and displaying customer information remained the same.

**Final Linked List:**

- Enhanced Plan Addition - Recognizing the need for customers to purchase multiple plans, we implemented the ability to add additional plans and prices to customers' linked lists.

- Dynamic Updates - The code provided showcases how customers' plans can be updated dynamically, allowing for flexibility in managing changing customer preferences.

**Visualizing Linked List**

- We provided a visualization of the linked list in an attempt to illustrate the structure of this linked list. Although it only includes the customer ID, name, package and prices, it is missing the other information. 

Overall, each phase of development demonstrates a progressive improvement of our Linked List implementation. We addressed issues with functionality along the way. The final implementation provides a robust solution for managing customers and their plans, with flexibility to accommodate changes and additions over time. 

We are aware of the drawbacks that come with the usage of linked lists (as highlited in the introduction) and it would be interesting in the future to explore how to implement this CRM linked list structure into a usable software architecture for a startup, like the one we have brainstormed or how to make it faster if the number of customers was to grow.

This project provided us with the opportunity to master our proficiency in data structures, specifically linked lists, and think outside the box when it comes to data structures in specific industries. It is beneficial to take a step back from the computer science and bridge the technical work with how it can help a company, and this exploration allowed us to do so.

Thanks for reading, we hope you enjoyed!